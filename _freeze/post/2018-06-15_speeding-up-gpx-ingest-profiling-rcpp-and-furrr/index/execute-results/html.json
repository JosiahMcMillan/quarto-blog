{
  "hash": "d53f5ed2fef6b07ee7bc15d5598df029",
  "result": {
    "markdown": "---\ntitle: \"speeding up GPX ingest: profiling, Rcpp and furrr\"\nsubtitle: |\n  a demonstration of how to profile r code on a toy problem\ndate: \"2018-06-15\"\ncategories: [code performance, rstats]\n---\n\nThis post is a casual case study in speeding up R code. I work through several iterations of a function to read and process GPS running data from Strava stored in the GPX format. Along the way I describe how to visualize code bottlenecks with `profvis` and briefly touch on fast compiled code with `Rcpp` and parallelization with `furrr`.\n\n## The problem: tidying trajectories in GPX files\n\nI record my runs on my phone using Strava. Strava stores the GPS recordings in GPX files, which are XML files that follow some additional conventions. They start with some metadata and then contain a list of GPS readings taken at one second intervals with longitude, latitude, elevation and timestap information. I wanted to approximate my speed at each timestamp in the GPS record, as well as my distance traveled since the previous GPS recordings. \n\nBelow I have an example of a GPX file that contains three GPS readings. First I create a vector that contains the names off my GPX files, and then I subset to the files that contain running data. I choose to work with the third run as a canonical example, and show a subset of the recording with three GPS readings.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n\n# file contain run data\nact_files <- dir(here::here(\"post\", \"2018-06-15_speeding-up-gpx-ingest-profiling-rcpp-and-furrr\", \"2018-04-17-activities-alex\"),\n  full.names = TRUE\n)\nrun_files <- act_files[str_detect(act_files, \"Run\")]\n\n# example file we'll work with\nfname <- run_files[3]\n\n# subset of example\nall <- read_lines(fname)\nmini_idx <- c(1:20, 5897:5899)\ncat(all[mini_idx], sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gpx creator=\"StravaGPX Android\" version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n <metadata>\n  <time>2017-10-31T17:58:22Z</time>\n </metadata>\n <trk>\n  <name>analytically slow</name>\n  <trkseg>\n   <trkpt lat=\"29.7169490\" lon=\"-95.3978210\">\n    <ele>14.1</ele>\n    <time>2017-10-31T17:58:22Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7168040\" lon=\"-95.3977180\">\n    <ele>14.4</ele>\n    <time>2017-10-31T17:58:29Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7167480\" lon=\"-95.3976890\">\n    <ele>14.5</ele>\n    <time>2017-10-31T17:58:30Z</time>\n   </trkpt>\n  </trkseg>\n </trk>\n</gpx>\n```\n:::\n:::\n\nThe part we want is in the `<trkseg>` tags. We'd like to turn this into a tidy dataframe where each row represents one GPS reading and the columns contain information like speed, distance, traveled, elevation gained, etc.\n\n## GPX reader version 0: using plotKML::readGPX \n\n:::{.callout-note}\n`plotKML` was archived from CRAN on 2022-04-18 and the archived version isn't easy to install. I've pulled the source for the `readGPX()` function and inserted it below to avoid depending on the `plotKML` package as of 2022-04-29.\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(XML)\n\nreadGPX <- function(gpx.file,\n                    metadata = TRUE,\n                    bounds = TRUE,\n                    waypoints = TRUE,\n                    tracks = TRUE,\n                    routes = TRUE) {\n  opt <- options(warn = -1)\n  if (!file.exists(gpx.file)) stop(\"The file '\", gpx.file, \"'\\n  does not exist in \", getwd())\n\n  if (metadata == TRUE) {\n    metadata <- .readGPX.element(gpx.file, \"name\")\n  }\n  if (bounds == TRUE) {\n    bounds <- .readGPX.element(gpx.file, \"bounds\")\n  }\n  if (waypoints == TRUE) {\n    waypoints <- .readGPX.element(gpx.file, \"wpt\")\n  }\n  if (tracks == TRUE) {\n    tracks <- .readGPX.element(gpx.file, \"trk\")\n  }\n  if (routes == TRUE) {\n    routes <- .readGPX.element(gpx.file, \"rte\")\n  }\n\n  gpx <- list(metadata = metadata, bounds = bounds, waypoints = waypoints, tracks = tracks, routes = routes)\n  return(gpx)\n  on.exit(options(opt))\n}\n\n## Read various elements from a *.gpx file:\n\n.readGPX.element <- function(gpx.file, element) {\n  # element = \"metadata\", \"wpt\", \"rte\", \"trk\"\n\n  ret <- xmlTreeParse(gpx.file, useInternalNodes = TRUE)\n  # top structure:\n  top <- xmlRoot(ret)\n\n  # check if there is any content:\n  if (any(grep(element, names(top)))) {\n\n    # tracks:\n    if (element == \"trk\") {\n      ret <- NULL\n      nu <- which(names(top) %in% element)\n      for (c in seq_along(nu)) {\n        lst <- which(names(top[[nu[c]]]) %in% \"trkseg\")\n        nm <- names(top[[nu[c]]][[lst[1]]][[1]])\n        ret[[c]] <- list(NULL)\n        for (i in seq_along(lst)) {\n          trkpt <- top[[nu[c]]][[lst[i]]]\n          ret[[c]][[i]] <- data.frame(NULL)\n          ## get columns (https://www.topografix.com/GPX/1/1/#type_wptType)\n          lon <- as.numeric(xmlSApply(trkpt, xmlGetAttr, \"lon\"))\n          lat <- as.numeric(xmlSApply(trkpt, xmlGetAttr, \"lat\"))\n          ret[[c]][[i]][1:length(lon), \"lon\"] <- lon\n          ret[[c]][[i]][1:length(lat), \"lat\"] <- lat\n          if (!nm[[1]] == \"NULL\") {\n            for (j in 1:length(nm)) {\n              xm <- as.character(sapply(sapply(xmlChildren(trkpt), function(x) x[[nm[[j]]]]), xmlValue))\n              ret[[c]][[i]][1:length(xm), nm[[j]]] <- xm\n            }\n          }\n        }\n        names(ret[[c]]) <- xmlValue(top[[nu[c]]][[\"name\"]])\n      }\n    }\n\n    if (element == \"wpt\") {\n      ret <- data.frame(NULL)\n      nu <- which(names(top) %in% element)\n      nm <- names(top[[nu[1]]])\n      for (i in seq_along(nu)) {\n        # coordinates:\n        ret[i, \"lon\"] <- as.numeric(xmlGetAttr(top[[nu[i]]], \"lon\"))\n        ret[i, \"lat\"] <- as.numeric(xmlGetAttr(top[[nu[i]]], \"lat\"))\n        if (!nm[[1]] == \"NULL\") {\n          for (j in 1:length(nm)) {\n            ret[i, nm[[j]]] <- xmlValue(xmlChildren(top[[nu[i]]])[[nm[[j]]]])\n          }\n        }\n      }\n    }\n\n    if (element == \"rte\") {\n      ret <- NULL\n      nu <- which(names(top) %in% element)\n      for (c in seq_along(nu)) {\n        ret[[c]] <- data.frame(NULL)\n        lst <- which(names(top[[nu[c]]]) %in% \"rtept\")\n        nm <- names(top[[nu[c]]][[lst[1]]])\n        for (i in seq_along(lst)) {\n          rtept <- top[[nu[c]]][[lst[i]]]\n          ret[[c]][i, \"lon\"] <- as.numeric(xmlGetAttr(rtept, \"lon\"))\n          ret[[c]][i, \"lat\"] <- as.numeric(xmlGetAttr(rtept, \"lat\"))\n          if (!nm[[1]] == \"NULL\") {\n            for (j in c(\"name\", \"cmt\", \"desc\", \"sym\", \"type\")) {\n              try(ret[[c]][i, j] <- xmlValue(rtept[[j]]), silent = TRUE)\n            }\n          }\n        }\n        names(ret)[c] <- xmlValue(top[[nu[c]]][[\"name\"]])\n      }\n    }\n\n    # bounds\n    if (element == \"bounds\") {\n      nu <- which(names(top) %in% element)\n      ret <- matrix(rep(NA, 4), nrow = 2, dimnames = list(c(\"lat\", \"lon\"), c(\"min\", \"max\")))\n      # coordinates:\n      ret[1, 1] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"minlon\"))\n      ret[1, 2] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"maxlon\"))\n      ret[2, 1] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"minlat\"))\n      ret[2, 2] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"maxlat\"))\n    }\n\n    # metadata\n    if (element == \"name\") {\n      lst <- c(\"name\", \"desc\", \"author\", \"email\", \"url\", \"urlname\", \"time\")\n      nu <- which(names(top) %in% lst)\n      if (!nu[[1]] == \"NULL\") {\n        ret <- data.frame(NULL)\n        for (i in seq_along(lst)) {\n          try(ret[1, lst[i]] <- xmlValue(top[[nu[[i]]]]), silent = TRUE)\n        }\n      }\n    }\n  } else {\n    ret <- NULL\n  }\n\n  return(ret)\n}\n```\n:::\n\nUsing `plotKML::readGPX` we can read the representative file into R.\n\n::: {.cell}\n\n```{.r .cell-code}\ngps_raw <- readGPX(fname)$tracks[[1]][[1]]  |> \n  as_tibble()\n\ngps_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n     lon   lat ele   time                \n   <dbl> <dbl> <chr> <chr>               \n 1 -95.4  29.7 14.1  2017-10-31T17:58:22Z\n 2 -95.4  29.7 14.4  2017-10-31T17:58:29Z\n 3 -95.4  29.7 14.5  2017-10-31T17:58:30Z\n 4 -95.4  29.7 14.6  2017-10-31T17:58:31Z\n 5 -95.4  29.7 14.6  2017-10-31T17:58:32Z\n 6 -95.4  29.7 14.7  2017-10-31T17:58:33Z\n 7 -95.4  29.7 14.7  2017-10-31T17:58:34Z\n 8 -95.4  29.7 14.7  2017-10-31T17:58:36Z\n 9 -95.4  29.7 14.7  2017-10-31T17:58:37Z\n10 -95.4  29.7 14.7  2017-10-31T17:58:38Z\n# … with 1,462 more rows\n```\n:::\n:::\n\nNow we can we correct the type information:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\nretyped <- gps_raw |>\n  mutate_at(vars(lon, lat, ele), as.numeric) |>\n  mutate_at(vars(time), lubridate::ymd_hms)\n\nretyped\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n     lon   lat   ele time               \n   <dbl> <dbl> <dbl> <dttm>             \n 1 -95.4  29.7  14.1 2017-10-31 17:58:22\n 2 -95.4  29.7  14.4 2017-10-31 17:58:29\n 3 -95.4  29.7  14.5 2017-10-31 17:58:30\n 4 -95.4  29.7  14.6 2017-10-31 17:58:31\n 5 -95.4  29.7  14.6 2017-10-31 17:58:32\n 6 -95.4  29.7  14.7 2017-10-31 17:58:33\n 7 -95.4  29.7  14.7 2017-10-31 17:58:34\n 8 -95.4  29.7  14.7 2017-10-31 17:58:36\n 9 -95.4  29.7  14.7 2017-10-31 17:58:37\n10 -95.4  29.7  14.7 2017-10-31 17:58:38\n# … with 1,462 more rows\n```\n:::\n:::\n\nWe want to compare location at $t$ and $t - 1$, so we create a lagged column of longitudes and latitudes. We put longitude and latitude together into a vector to play well with `raster::pointDistance`, which we'll use to compute the great circle distance between two points.\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nlagged <- retyped |>\n  mutate(\n    x = map2(lon, lat, c), # create lagged position, this means the\n    x_old = lag(x),        # first row isn't complete\n    t_old = lag(time)\n  ) |>\n  slice(-1) # remove incomplete first row\n\nlagged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,471 × 7\n     lon   lat   ele time                x         x_old     t_old              \n   <dbl> <dbl> <dbl> <dttm>              <list>    <list>    <dttm>             \n 1 -95.4  29.7  14.4 2017-10-31 17:58:29 <dbl [2]> <dbl [2]> 2017-10-31 17:58:22\n 2 -95.4  29.7  14.5 2017-10-31 17:58:30 <dbl [2]> <dbl [2]> 2017-10-31 17:58:29\n 3 -95.4  29.7  14.6 2017-10-31 17:58:31 <dbl [2]> <dbl [2]> 2017-10-31 17:58:30\n 4 -95.4  29.7  14.6 2017-10-31 17:58:32 <dbl [2]> <dbl [2]> 2017-10-31 17:58:31\n 5 -95.4  29.7  14.7 2017-10-31 17:58:33 <dbl [2]> <dbl [2]> 2017-10-31 17:58:32\n 6 -95.4  29.7  14.7 2017-10-31 17:58:34 <dbl [2]> <dbl [2]> 2017-10-31 17:58:33\n 7 -95.4  29.7  14.7 2017-10-31 17:58:36 <dbl [2]> <dbl [2]> 2017-10-31 17:58:34\n 8 -95.4  29.7  14.7 2017-10-31 17:58:37 <dbl [2]> <dbl [2]> 2017-10-31 17:58:36\n 9 -95.4  29.7  14.7 2017-10-31 17:58:38 <dbl [2]> <dbl [2]> 2017-10-31 17:58:37\n10 -95.4  29.7  14.7 2017-10-31 17:58:39 <dbl [2]> <dbl [2]> 2017-10-31 17:58:38\n# … with 1,461 more rows\n```\n:::\n:::\n\nIt turns out this data is not contiguous. Strava has a feature called autopause which detects pauses in runs (for example, at a stoplight), and GPS readings during paused periods are not include in the GPX files[^1]. GPS readings typically happen once every second. I plotted the time gaps between readings and realized that time gaps greater than three seconds between two GPS recordings indicated a pause. This lets me break the run down into a series of contigous segments:\n\n[^1]: It took me a two months to realize this, mostly because I didn't plot enough of the data. If you're curous how Strava detects paused movement, you can read more [here](https://medium.com/strava-engineering/improving-auto-pause-for-everyone-13f253c66f9e). It seems to involve more if-statements than fun models.\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nsegmented <- lagged |>\n  mutate(\n    rest = as.numeric(time - t_old), # seconds\n    new_segment = as.numeric(rest > 3),\n    segment = cumsum(new_segment)\n  ) |>\n  # don't want t_old to be from previous segment\n  group_by(segment) |>\n  slice(-1)\n\nsegmented\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 10\n# Groups:   segment [5]\n     lon   lat   ele time                x      x_old  t_old                rest\n   <dbl> <dbl> <dbl> <dttm>              <list> <list> <dttm>              <dbl>\n 1 -95.4  29.7  14.5 2017-10-31 17:58:30 <dbl>  <dbl>  2017-10-31 17:58:29     1\n 2 -95.4  29.7  14.6 2017-10-31 17:58:31 <dbl>  <dbl>  2017-10-31 17:58:30     1\n 3 -95.4  29.7  14.6 2017-10-31 17:58:32 <dbl>  <dbl>  2017-10-31 17:58:31     1\n 4 -95.4  29.7  14.7 2017-10-31 17:58:33 <dbl>  <dbl>  2017-10-31 17:58:32     1\n 5 -95.4  29.7  14.7 2017-10-31 17:58:34 <dbl>  <dbl>  2017-10-31 17:58:33     1\n 6 -95.4  29.7  14.7 2017-10-31 17:58:36 <dbl>  <dbl>  2017-10-31 17:58:34     2\n 7 -95.4  29.7  14.7 2017-10-31 17:58:37 <dbl>  <dbl>  2017-10-31 17:58:36     1\n 8 -95.4  29.7  14.7 2017-10-31 17:58:38 <dbl>  <dbl>  2017-10-31 17:58:37     1\n 9 -95.4  29.7  14.7 2017-10-31 17:58:39 <dbl>  <dbl>  2017-10-31 17:58:38     1\n10 -95.4  29.7  14.6 2017-10-31 17:58:40 <dbl>  <dbl>  2017-10-31 17:58:39     1\n# … with 1,454 more rows, and 2 more variables: new_segment <dbl>,\n#   segment <dbl>\n```\n:::\n:::\n\nNow I calculate some information about each time point and segment that I'll use in downstream analyses:\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nlonlat_dist <- partial(raster::pointDistance, lonlat = TRUE)\n\nuseful <- segmented |>\n  mutate(\n    seg_length = max(time) - min(t_old),  # seconds\n    dx = map2_dbl(x, x_old, lonlat_dist), # meters\n    dx = 0.000621371 * dx,                # miles\n    dt = rest / 60^2,                     # hours\n    speed = dx / dt,                      # mph\n    pace = 60 * dt / dx,                  # min / mile\n    elev = as.numeric(ele)                # feet\n  ) |> \n  dplyr::select(-ele, -x, -x_old, -t_old, -new_segment, -rest) |>\n  ungroup()\n\nuseful\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 10\n     lon   lat time                seg…¹ seg…²      dx      dt speed  pace  elev\n   <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl> <dbl>\n 1 -95.4  29.7 2017-10-31 17:58:30     1 510 … 0.00423 2.78e-4 15.2   3.94  14.5\n 2 -95.4  29.7 2017-10-31 17:58:31     1 510 … 0.00367 2.78e-4 13.2   4.54  14.6\n 3 -95.4  29.7 2017-10-31 17:58:32     1 510 … 0.00197 2.78e-4  7.11  8.44  14.6\n 4 -95.4  29.7 2017-10-31 17:58:33     1 510 … 0.00483 2.78e-4 17.4   3.45  14.7\n 5 -95.4  29.7 2017-10-31 17:58:34     1 510 … 0.00230 2.78e-4  8.28  7.25  14.7\n 6 -95.4  29.7 2017-10-31 17:58:36     1 510 … 0.00410 5.56e-4  7.38  8.13  14.7\n 7 -95.4  29.7 2017-10-31 17:58:37     1 510 … 0.00243 2.78e-4  8.75  6.86  14.7\n 8 -95.4  29.7 2017-10-31 17:58:38     1 510 … 0.00316 2.78e-4 11.4   5.27  14.7\n 9 -95.4  29.7 2017-10-31 17:58:39     1 510 … 0.00415 2.78e-4 15.0   4.01  14.7\n10 -95.4  29.7 2017-10-31 17:58:40     1 510 … 0.00363 2.78e-4 13.1   4.60  14.6\n# … with 1,454 more rows, and abbreviated variable names ¹​segment, ²​seg_length\n```\n:::\n:::\n\nWe can quickly visualize instantaneous speed throughout the run:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(useful, aes(time, speed, group = segment)) +\n  geom_point() +\n  geom_line(alpha = 0.5) +\n  labs(\n    title = \"Speed throughout example run\",\n    y = \"Speed (mph)\"\n  ) +\n  theme_classic() +\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nWe can see two short pauses present in the run at around 18:08 and 18:17.\n\nWe're going to use the code above a whole bunch, so we wrap it up into a helper function. I'm not sure that `raster::pointDistance` is the best option for calculating the distance between two points, so we use a `dist_func` argument to make it easy to switch out.\n\n::: {.cell}\n\n```{.r .cell-code}\nget_metrics <- function(gps_df, dist_func = lonlat_dist) {\n  gps_df |>\n    mutate_at(vars(lon, lat, ele), as.numeric) |>\n    mutate_at(vars(time), lubridate::ymd_hms) |>\n    mutate(\n      x = map2(lon, lat, c),\n      x_old = lag(x),\n      t_old = lag(time)\n    ) |>\n    slice(-1) |>\n    mutate(\n      rest = as.numeric(time - t_old),\n      new_segment = as.numeric(rest > 3),\n      segment = cumsum(new_segment) + 1\n    ) |>\n    group_by(segment) |>\n    slice(-1) |>\n    mutate(\n      seg_length = max(time) - min(t_old),\n      dx = map2_dbl(x, x_old, dist_func),\n      dx = 0.000621371 * dx,\n      dt = rest / 60^2,\n      speed = dx / dt,\n      pace = 60 * dt / dx,\n      elev = as.numeric(ele)\n    ) |>\n    dplyr::select(-ele, -x, -x_old, -t_old, -new_segment, -rest) |>\n    ungroup()\n}\n```\n:::\n\nThis means our initial `read_gpx` function is just two lines:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx0 <- function(fname) {\n  gps_df <- readGPX(fname)$tracks[[1]][[1]]\n  get_metrics(gps_df)\n}\n```\n:::\n\nWe can use `profvis::profvis` to create an interactive visualization of how long it takes to read the example file.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(profvis)\n\nprofvis(read_gpx0(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-1a4f95264500f1708431\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1a4f95264500f1708431\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,20,20,20,20,20,21,21,21,21,22,23,23],\"depth\":[1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,5,4,3,2,1,4,3,2,1,1,2,1],\"label\":[\".Call\",\"lapply\",\"sapply\",\"xmlSApply.XMLInternalNode\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"grep\",\"FUN\",\"lapply\",\"sapply\",\"xmlSApply.XMLInternalNode\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"lapply\",\"sapply\",\"xmlSApply.XMLInternalNode\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\".Call\",\"is\",\"[[.XMLInternalElementNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"is\",\"[[.XMLInternalElementNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"is\",\"[[.XMLInternalElementNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"is\",\"[[.XMLInternalNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"getClassDef\",\"is\",\"[[.XMLInternalElementNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"getClassDef\",\"is\",\"[[.XMLInternalElementNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\".Call\",\"tolower\",\"getEncodingREnum\",\"xmlValue.XMLInternalNode\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"findCenvVar\",\"getInlineInfo\",\"tryInline\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallExprFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"h\",\"tryInline\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpfun\",\"compiler:::tryCmpfun\",\"sys.calls\",\"add_handler\",\"defer\",\"local_bindings\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::vars_select\",\"tbl_at_vars\",\"tbl_at_syms\",\"manip_at\",\"mutate_at\",\"get_metrics\",\"read_gpx0\",\"regexpr\",\".strptime\",\"FUN\",\"lapply\",\".train_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"enexpr\",\"inject\",\"%<~%\",\"env_get\",\"...length2\",\"impl\",\"standardGeneric\",\"cbind\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\".Call\",\"<GC>\",\"...length\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[33.709098815918,33.9878540039062,33.9878540039062,33.9878540039062,33.9878540039062,33.9878540039062,33.9878540039062,34.3199310302734,34.3199310302734,34.3199310302734,34.3199310302734,34.3199310302734,34.3199310302734,34.3199310302734,34.3199310302734,34.8319244384766,34.8319244384766,34.8319244384766,34.8319244384766,34.8319244384766,34.8319244384766,35.0716705322266,35.5710144042969,35.5710144042969,35.5710144042969,35.5710144042969,35.5710144042969,35.5710144042969,35.5710144042969,35.5710144042969,35.708381652832,35.708381652832,35.708381652832,35.708381652832,35.708381652832,35.708381652832,35.708381652832,35.708381652832,35.7989120483398,35.7989120483398,35.7989120483398,35.7989120483398,35.7989120483398,35.7989120483398,35.7989120483398,35.7989120483398,36.1523818969727,36.1523818969727,36.1523818969727,36.1523818969727,36.1523818969727,36.1523818969727,36.6578598022461,36.6578598022461,36.6578598022461,36.6578598022461,36.6578598022461,36.6578598022461,36.6578598022461,36.6578598022461,36.7934417724609,36.7934417724609,36.7934417724609,36.7934417724609,36.7934417724609,36.7934417724609,36.7934417724609,36.7934417724609,36.7934417724609,36.8831558227539,36.8831558227539,36.8831558227539,36.8831558227539,36.8831558227539,36.8831558227539,36.8831558227539,36.8831558227539,36.8831558227539,37.1541213989258,37.4100952148438,37.4100952148438,37.4100952148438,37.4100952148438,37.4100952148438,37.4100952148438,37.4100952148438,37.4100952148438,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.7899627685547,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,37.950553894043,40.8407363891602,40.8407363891602,40.8407363891602,40.8407363891602,40.8407363891602,40.8407363891602,40.8407363891602,40.8407363891602,40.8407363891602,40.8407363891602,41.4343490600586,41.4343490600586,41.4343490600586,41.4343490600586,41.4343490600586,41.4343490600586,42.9339370727539,43.8164138793945,43.8164138793945,43.8164138793945,43.8164138793945,43.8164138793945,45.1668701171875,45.1668701171875,45.1668701171875,45.1668701171875,45.9603881835938,47.0334625244141,47.0334625244141],\"meminc\":[0,0.278755187988281,0,0,0,0,0,0.332077026367188,0,0,0,0,0,0,0,0.511993408203125,0,0,0,0,0,0.23974609375,0.499343872070312,0,0,0,0,0,0,0,0.137367248535156,0,0,0,0,0,0,0,0.0905303955078125,0,0,0,0,0,0,0,0.353469848632812,0,0,0,0,0,0.505477905273438,0,0,0,0,0,0,0,0.135581970214844,0,0,0,0,0,0,0,0,0.0897140502929688,0,0,0,0,0,0,0,0,0.270965576171875,0.255973815917969,0,0,0,0,0,0,0,0.379867553710938,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.160591125488281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.89018249511719,0,0,0,0,0,0,0,0,0,0.593612670898438,0,0,0,0,0,1.49958801269531,0.882476806640625,0,0,0,0,1.35045623779297,0,0,0,0.79351806640625,1.07307434082031,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpPguRDA/file11b6d720c9c3c.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nIn the default view, the horizontal axis represents time and the box represents the call stack. All the boxes above `plotKML::readGPX` are functions called by `plotKML::readGPX`. Here it seems like `plotKML::readGPX` takes about 400 milliseconds to run. So about half the time is spent reading in the file, and half calculating metrics. Most of the time calculating metrics is in `raster::pointDistance`, which is fairly up the call stack - you may have to click and drag the plot to see it.\n\n## GPX reader version 1: no more plotKML::GPX\n\nThen I broke my R library and couldn't use `plotKML::readGPX` for a little while. Since GPX files are XML files, I used the `xml2` package as a replacement. `xml2` has a function `as_list` that let me treat the XML as an R list. We extract the relevant portion of the list and `purrr::map_dfr` each GPS recording into a row of a `tibble`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n\nrun_xml <- read_xml(fname)\nrun_list <- as_list(run_xml)\ngps_pts <- run_list$gpx$trk$trkseg\n\nextract_gps_point <- function(point) {\n  tibble(\n    lon = attr(point, \"lon\"),\n    lat = attr(point, \"lat\"),\n    ele = point$ele[[1]],\n    time = point$time[[1]]\n  )\n}\n\nmap_dfr(gps_pts, extract_gps_point)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n   lon         lat        ele   time                \n   <chr>       <chr>      <chr> <chr>               \n 1 -95.3978210 29.7169490 14.1  2017-10-31T17:58:22Z\n 2 -95.3977180 29.7168040 14.4  2017-10-31T17:58:29Z\n 3 -95.3976890 29.7167480 14.5  2017-10-31T17:58:30Z\n 4 -95.3976530 29.7167050 14.6  2017-10-31T17:58:31Z\n 5 -95.3976600 29.7166770 14.6  2017-10-31T17:58:32Z\n 6 -95.3976330 29.7166110 14.7  2017-10-31T17:58:33Z\n 7 -95.3976090 29.7165850 14.7  2017-10-31T17:58:34Z\n 8 -95.3975830 29.7165300 14.7  2017-10-31T17:58:36Z\n 9 -95.3975780 29.7164950 14.7  2017-10-31T17:58:37Z\n10 -95.3975630 29.7164510 14.7  2017-10-31T17:58:38Z\n# … with 1,462 more rows\n```\n:::\n:::\n\nThen we wrap this in a function.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx1 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n\n  extract_gps_point <- function(point) {\n    tibble(\n      lon = attr(point, \"lon\"),\n      lat = attr(point, \"lat\"),\n      ele = point$ele[[1]],\n      time = point$time[[1]]\n    )\n  }\n\n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n```\n:::\n\nThe next part is critical when trying to speed up code: **test that the new code does the same thing as the old code**.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(testthat)\n\nexpected <- read_gpx0(fname)\nresult_1 <- read_gpx1(fname)\n\n# silence means everything went well\nexpect_equal(expected, result_1)\n```\n:::\n\nThis turned out to be too slow, so we profile and see which lines are taking the most amount of time.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx1(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-74a8d36ffdeeb681dba1\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-74a8d36ffdeeb681dba1\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,36,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,47,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,54,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,67,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,78,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,84,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,117,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,127,127,127,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,132,132,132,132,132,133,133,133,133,133,133,134,134,134,134,134,135,135,135,135,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137],\"depth\":[13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,1,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,3,2,1,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1,5,4,3,2,1,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"match.fun\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"[[\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"xml_attrs.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"seq_along\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"list\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"nodeset_apply\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"[[\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"nodeset_apply\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"[[\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_attrs.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"any\",\"paste0\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"quo_squash_impl\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\".transformer\",\"<Anonymous>\",\".Call\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"which\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"parent.frame\",\"tryCatch\",\"<Anonymous>\",\"add_to_env\",\"add_to_env2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"map\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"withCallingHandlers\",\"subclass_name_repair_errors\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\"as.symbol\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\".transformer\",\"<Anonymous>\",\"length\",\"rep_along\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"length\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"length\",\"environment\",\"vec_size\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grep\",\"detect_dot_dot\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"has_names\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as_glue.character\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"<Anonymous>\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is_string\",\"as_string\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"has_length\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"do.call\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"rep_along\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grep\",\"detect_dot_dot\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"paste0\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".Call\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"environment\",\"list2\",\"<Anonymous>\",\"mapply\",\"map2\",\"imap\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\".transformer\",\"<Anonymous>\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\".transformer\",\"<Anonymous>\",\"which\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"set_names\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"do.call\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"paste0\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is.numeric\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"has_names\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"replace\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"duplicate\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"structure\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"detect_dot_dot\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"parse\",\".transformer\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"validate_minimal_names\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grep\",\"detect_dot_dot\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"set_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"structure\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\".transformer\",\"<Anonymous>\",\"lapply\",\"map\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx1\",\"sys.calls\",\"add_handler\",\"defer\",\"local_bindings\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::vars_select\",\"tbl_at_vars\",\"tbl_at_syms\",\"manip_at\",\"mutate_at\",\"get_metrics\",\"read_gpx1\",\"paste\",\".str_sub\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"dplyr_quosures\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx1\",\"matrix\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"is.data.frame\",\"colnames\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"colnames\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\".Call\",\"is_string\",\"as_string\",\"%<~%\",\"env_get\",\"eval_sym\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\",\"get_metrics\",\"read_gpx1\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.7481460571289,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,35.9849166870117,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.2372741699219,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.4040985107422,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.656494140625,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,36.8233413696289,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.0728149414062,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.234489440918,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.4823455810547,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.6393203735352,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,37.8776931762695,38.0378952026367,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.2788467407227,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.4407424926758,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.6845474243164,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,38.8468933105469,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.0897369384766,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.2500686645508,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.4886627197266,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,39.6469421386719,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.4588012695312,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.6259841918945,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,35.8747863769531,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.0419845581055,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.2931518554688,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.4595184326172,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.7096252441406,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,36.874755859375,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.1176681518555,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.2762908935547,37.5146331787109,37.5146331787109,37.5146331787109,37.5146331787109,37.5146331787109,37.5146331787109,37.5146331787109,37.5146331787109,37.5146331787109,37.6551513671875,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.8446197509766,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,37.9700927734375,38.1582565307617,38.1582565307617,38.1582565307617,38.2855834960938,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.4760055541992,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.6020812988281,38.7927551269531,38.7927551269531,38.7927551269531,38.9195709228516,38.9195709228516,38.9195709228516,38.9195709228516,38.9195709228516,38.9195709228516,38.9195709228516,38.9195709228516,39.11083984375,39.11083984375,39.11083984375,39.11083984375,39.11083984375,39.11083984375,39.11083984375,39.11083984375,39.11083984375,39.11083984375,39.2375640869141,39.2375640869141,39.2375640869141,39.2375640869141,39.2375640869141,39.2375640869141,39.2375640869141,39.2375640869141,39.2375640869141,39.2375640869141,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,39.3775787353516,35.5801162719727,35.5801162719727,35.5801162719727,35.7335662841797,35.7335662841797,35.7335662841797,35.7335662841797,35.7335662841797,35.7335662841797,35.7335662841797,35.7335662841797,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,35.8596725463867,36.0414962768555,36.1688537597656,36.1688537597656,36.1688537597656,36.1688537597656,36.1688537597656,36.1688537597656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.3622131347656,36.4906539916992,36.682373046875,36.682373046875,36.682373046875,36.682373046875,36.682373046875,36.682373046875,36.682373046875,36.682373046875,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.8089447021484,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,36.9986343383789,37.1247406005859,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.3093872070312,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.4342651367188,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.6243896484375,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.7519378662109,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,37.9429397583008,38.0688781738281,38.0688781738281,38.0688781738281,38.0688781738281,38.0688781738281,38.0688781738281,38.0688781738281,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.2594146728516,38.3865432739258,38.5752258300781,38.5752258300781,38.5752258300781,38.5752258300781,38.5752258300781,38.5752258300781,38.5752258300781,38.5752258300781,38.5752258300781,38.5752258300781,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.6990661621094,38.8857269287109,38.8857269287109,38.8857269287109,38.8857269287109,38.8857269287109,38.8857269287109,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.0107040405273,39.1993255615234,35.5478286743164,35.5478286743164,35.5478286743164,35.5478286743164,35.5478286743164,35.5478286743164,35.5478286743164,35.5478286743164,35.7323989868164,35.7323989868164,35.7323989868164,35.7323989868164,35.7323989868164,35.7323989868164,35.7323989868164,35.7323989868164,35.7323989868164,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,35.8404083251953,36.0234680175781,36.0234680175781,36.0234680175781,36.0234680175781,36.0234680175781,36.0234680175781,36.0234680175781,36.0234680175781,36.0234680175781,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.1508941650391,36.3442001342773,36.3442001342773,36.3442001342773,36.3442001342773,36.3442001342773,36.3442001342773,36.3442001342773,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.4729461669922,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.6651992797852,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.7926254272461,36.982421875,36.982421875,36.982421875,36.982421875,36.982421875,36.982421875,36.982421875,36.982421875,36.982421875,36.982421875,37.1088027954102,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.2962341308594,37.421142578125,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.6110229492188,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.7382049560547,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,37.9283218383789,38.054328918457,38.2451934814453,38.2451934814453,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.3724975585938,38.5640487670898,38.5640487670898,38.5640487670898,38.6921997070312,38.6921997070312,38.6921997070312,38.6921997070312,38.6921997070312,38.6921997070312,38.6921997070312,38.6921997070312,38.6921997070312,38.8837280273438,38.8837280273438,38.8837280273438,38.8837280273438,38.8837280273438,38.8837280273438,38.8837280273438,38.8837280273438,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.0107574462891,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,39.2023468017578,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.5763092041016,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.7664947509766,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,35.8953247070312,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.0892791748047,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.2192535400391,36.4137496948242,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.5432968139648,36.7361297607422,36.7361297607422,36.7361297607422,36.7361297607422,36.7361297607422,36.7361297607422,36.7361297607422,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,36.8640899658203,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.0540008544922,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.1799392700195,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.3667068481445,37.4924163818359,37.4924163818359,37.4924163818359,37.4924163818359,37.4924163818359,37.4924163818359,37.4924163818359,37.4924163818359,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.6825103759766,37.8100433349609,37.8100433349609,37.8100433349609,37.8100433349609,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.0013885498047,38.12890625,38.12890625,38.12890625,38.12890625,38.12890625,38.12890625,38.12890625,38.12890625,38.12890625,38.12890625,38.12890625,38.3204040527344,38.3204040527344,38.3204040527344,38.3204040527344,38.3204040527344,38.3204040527344,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.4478073120117,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.6392517089844,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,38.7656173706055,39.0852584838867,39.0852584838867,39.0852584838867,39.0852584838867,39.0852584838867,39.0852584838867,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,39.2767105102539,35.8453216552734,35.9730072021484,35.9730072021484,35.9730072021484,35.9730072021484,35.9730072021484,35.9730072021484,35.9730072021484,35.9730072021484,36.1686172485352,36.1686172485352,36.1686172485352,36.1686172485352,36.1686172485352,36.1686172485352,36.1686172485352,36.1686172485352,36.1686172485352,36.2993011474609,36.2993011474609,36.2993011474609,36.2993011474609,36.2993011474609,36.2993011474609,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.4942626953125,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.6234970092773,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.8165130615234,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,36.9458084106445,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.1371917724609,37.2637100219727,37.2637100219727,37.2637100219727,37.2637100219727,37.2637100219727,37.2637100219727,37.2637100219727,37.2637100219727,37.4506454467773,37.4506454467773,37.4506454467773,37.6109085083008,37.6109085083008,37.6109085083008,37.6109085083008,37.6109085083008,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,38.9038696289062,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,40.0104522705078,42.301025390625,42.301025390625,42.301025390625,42.301025390625,43.0776596069336,43.0776596069336,43.0776596069336,43.0776596069336,43.0776596069336,44.3752212524414,44.3752212524414,44.3752212524414,44.3752212524414,44.3752212524414,44.3752212524414,45.1011657714844,45.1011657714844,45.1011657714844,45.1011657714844,45.1011657714844,46.3711166381836,46.3711166381836,46.3711166381836,46.3711166381836,47.1959609985352,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008,48.4243850708008],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0.236770629882812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.252357482910156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.166824340820312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.252395629882812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.166847229003906,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.249473571777344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.161674499511719,0,0,0,0,0,0,0,0,0,0,0,0.247856140136719,0,0,0,0,0,0,0,0,0,0,0,0,0,0.156974792480469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.238372802734375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.160202026367188,0.240951538085938,0,0,0,0,0,0,0,0,0,0,0,0.161895751953125,0,0,0,0,0,0,0,0,0,0,0,0.243804931640625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.162345886230469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.242843627929688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.160331726074219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.238594055175781,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.158279418945312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.18814086914062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.167182922363281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.248802185058594,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.167198181152344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.251167297363281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.166366577148438,0,0,0,0,0,0,0,0,0,0,0,0,0,0.250106811523438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.165130615234375,0,0,0,0,0,0,0,0,0,0,0,0,0.242912292480469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.158622741699219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.23834228515625,0,0,0,0,0,0,0,0,0.140518188476562,0.189468383789062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125473022460938,0,0,0,0,0,0,0,0,0,0,0,0,0.188163757324219,0,0,0.127326965332031,0.190422058105469,0,0,0,0,0,0,0,0,0,0,0.126075744628906,0,0,0,0,0,0,0,0,0,0,0,0,0,0.190673828125,0,0,0.126815795898438,0,0,0,0,0,0,0,0.191268920898438,0,0,0,0,0,0,0,0,0,0.126724243164062,0,0,0,0,0,0,0,0,0,0.1400146484375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.79746246337891,0,0,0.153450012207031,0,0,0,0,0,0,0,0.126106262207031,0,0,0,0,0,0,0,0,0,0,0,0,0.18182373046875,0.127357482910156,0,0,0,0,0,0.193359375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.128440856933594,0.191719055175781,0,0,0,0,0,0,0,0.126571655273438,0,0,0,0,0,0,0,0,0,0,0,0,0.189689636230469,0,0,0,0,0,0,0,0,0,0,0,0,0.126106262207031,0.184646606445312,0,0,0,0,0,0,0,0,0,0,0,0,0.1248779296875,0,0,0,0,0,0,0,0,0,0,0,0,0.19012451171875,0,0,0,0,0,0,0,0,0,0,0,0.127548217773438,0,0,0,0,0,0,0,0,0,0,0,0,0.191001892089844,0,0,0,0,0,0,0,0,0,0,0,0,0.125938415527344,0,0,0,0,0,0,0.190536499023438,0,0,0,0,0,0,0,0,0,0,0,0,0.127128601074219,0.188682556152344,0,0,0,0,0,0,0,0,0,0.12384033203125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.186660766601562,0,0,0,0,0,0.124977111816406,0,0,0,0,0,0,0,0,0,0,0,0,0.188621520996094,-3.65149688720703,0,0,0,0,0,0,0,0.1845703125,0,0,0,0,0,0,0,0,0.108009338378906,0,0,0,0,0,0,0,0,0,0,0,0,0.183059692382812,0,0,0,0,0,0,0,0,0.127426147460938,0,0,0,0,0,0,0,0,0,0,0,0,0.193305969238281,0,0,0,0,0,0,0.128746032714844,0,0,0,0,0,0,0,0,0,0,0,0.192253112792969,0,0,0,0,0,0,0,0,0,0,0,0,0.127426147460938,0,0,0,0,0,0,0,0,0,0,0,0,0.189796447753906,0,0,0,0,0,0,0,0,0,0.126380920410156,0.187431335449219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.124908447265625,0.18988037109375,0,0,0,0,0,0,0,0,0,0,0,0,0,0.127182006835938,0,0,0,0,0,0,0,0,0,0,0,0,0,0.190116882324219,0,0,0,0,0,0,0,0,0,0,0,0,0.126007080078125,0.190864562988281,0,0.127304077148438,0,0,0,0,0,0,0,0,0,0,0,0,0,0.191551208496094,0,0,0.128150939941406,0,0,0,0,0,0,0,0,0.1915283203125,0,0,0,0,0,0,0,0.127029418945312,0,0,0,0,0,0,0,0,0,0,0,0,0,0.19158935546875,0,0,0,0,0,0,0,0,0,0,0,0,-3.62603759765625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.190185546875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.128829956054688,0,0,0,0,0,0,0,0,0,0,0,0,0,0.193954467773438,0,0,0,0,0,0,0,0,0,0,0,0,0,0.129974365234375,0,0,0,0,0,0,0,0,0,0,0,0.194496154785156,0.129547119140625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.192832946777344,0,0,0,0,0,0,0.127960205078125,0,0,0,0,0,0,0,0,0,0,0,0,0.189910888671875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125938415527344,0,0,0,0,0,0,0,0,0,0,0,0,0.186767578125,0,0,0,0,0,0,0,0,0,0,0,0,0.125709533691406,0,0,0,0,0,0,0,0.190093994140625,0,0,0,0,0,0,0,0,0,0,0,0.127532958984375,0,0,0,0.19134521484375,0,0,0,0,0,0,0,0,0,0,0,0.127517700195312,0,0,0,0,0,0,0,0,0,0,0.191497802734375,0,0,0,0,0,0.127403259277344,0,0,0,0,0,0,0,0,0,0,0,0.191444396972656,0,0,0,0,0,0,0,0,0,0,0,0,0.126365661621094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.31964111328125,0,0,0,0,0,0.191452026367188,0,0,0,0,0,0,0,0,0,0,0,-3.43138885498047,0.127685546875,0,0,0,0,0,0,0,0.195610046386719,0,0,0,0,0,0,0,0,0.130683898925781,0,0,0,0,0,0.194961547851562,0,0,0,0,0,0,0,0,0,0,0,0,0.129234313964844,0,0,0,0,0,0,0,0,0,0,0,0,0,0.193016052246094,0,0,0,0,0,0,0,0,0,0,0,0.129295349121094,0,0,0,0,0,0,0,0,0,0,0,0.191383361816406,0,0,0,0,0,0,0,0,0,0,0,0,0.126518249511719,0,0,0,0,0,0,0,0.186935424804688,0,0,0.160263061523438,0,0,0,0,1.29296112060547,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.10658264160156,0,0,0,0,0,0,0,0,0,0,0,2.29057312011719,0,0,0,0.776634216308594,0,0,0,0,1.29756164550781,0,0,0,0,0,0.725944519042969,0,0,0,0,1.26995086669922,0,0,0,0.824844360351562,1.22842407226562,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpPguRDA/file11b6d3d97559c.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nHere we see that we spend most of our time on the functions `as_list` and `tibble`.\n\n## GPX reader version 2: no more tibble\n\n`tibble`s are somewhat heavy objects, and we can bind lists together instead of `tibble`s, so let's try that next. We only change one line from `read_gpx1`.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx2 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n\n  extract_gps_point <- function(point) {\n    list(\n      lon = attr(point, \"lon\"),\n      lat = attr(point, \"lat\"),\n      ele = point$ele[[1]],\n      time = point$time[[1]]\n    )\n  }\n\n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n\nresult_2 <- read_gpx2(fname)\nexpect_equal(expected, result_2)\n```\n:::\n\nOur results are still as expected, which is good.  We profile again to see if we've done any better, which we have. Now we're at about 1.5 seconds instead of 2.5 seconds.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx2(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-fe1e1c692d0bdb6e3015\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fe1e1c692d0bdb6e3015\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,32,32,32,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,38,38,39,39,39,40,41,41,41,41,42,42,42,42,42,43,43,43,43,43,44,44,44,44,44,44],\"depth\":[12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,2,1,3,2,1,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,6,5,4,3,2,1],\"label\":[\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_type\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"any\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"[[\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"is.function\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"%in%\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_name.xml_node\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"match.fun\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"<GC>\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"isTRUE\",\"which\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"length\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"[[\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_mapper\",\"map_dfr\",\"read_gpx2\",\"detect_void_name\",\"is_named\",\"FUN\",\"vapply\",\".rlang_purrr_map_mold\",\"map_lgl\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\"vctrs::data_frame\",\"FUN\",\"lapply\",\"map\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\".External2\",\"sys.calls\",\"add_handler\",\"defer\",\"local_bindings\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::vars_select\",\"tbl_at_vars\",\"tbl_at_syms\",\"manip_at\",\"mutate_at\",\"get_metrics\",\"read_gpx2\",\"paste\",\".str_sub\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\".f\",\"map2\",\"%in%\",\"as_mapper.default\",\"map2_dbl\",\".Call\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"matrix\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"cbind\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\"<GC>\",\"colnames\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,35.983268737793,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.2115020751953,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.4658813476562,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.6344604492188,36.882453918457,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.0476684570312,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.2921447753906,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.4527130126953,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.6946334838867,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,37.8475189208984,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.0798797607422,38.236457824707,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.4740371704102,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.6311569213867,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,38.8719863891602,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.0298156738281,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.2653427124023,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.4211044311523,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.6618804931641,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.8172073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,39.9422073364258,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,35.7921524047852,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.0399398803711,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.2060775756836,36.4541168212891,36.4541168212891,36.4541168212891,36.4541168212891,36.4541168212891,36.4541168212891,36.4541168212891,36.4541168212891,36.4541168212891,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.6191787719727,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.8627395629883,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,36.9927368164062,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.2029800415039,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.3609313964844,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.5776901245117,37.7562103271484,37.7562103271484,37.7562103271484,38.1743087768555,38.1743087768555,38.1743087768555,38.1743087768555,38.1743087768555,38.1743087768555,38.1743087768555,38.1743087768555,38.1743087768555,38.4801330566406,38.4801330566406,38.4801330566406,38.4801330566406,38.4801330566406,38.4801330566406,38.4801330566406,40.4074935913086,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,40.7441787719727,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,42.9094848632812,43.8314590454102,43.8314590454102,44.8178253173828,44.8178253173828,44.8178253173828,45.6812744140625,47.0106048583984,47.0106048583984,47.0106048583984,47.0106048583984,47.8890609741211,47.8890609741211,47.8890609741211,47.8890609741211,47.8890609741211,49.1977081298828,49.1977081298828,49.1977081298828,49.1977081298828,49.1977081298828,48.0111999511719,48.0111999511719,48.0111999511719,48.0111999511719,48.0111999511719,48.0111999511719],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0.228233337402344,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.254379272460938,0,0,0,0,0,0,0,0,0,0,0,0,0.1685791015625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.247993469238281,0.165214538574219,0,0,0,0,0,0,0,0,0,0,0,0,0.244476318359375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.160568237304688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.241920471191406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.152885437011719,0,0,0,0,0,0,0,0,0,0,0,0,0,0.23236083984375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.156578063964844,0.237579345703125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.157119750976562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.240829467773438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.157829284667969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.235527038574219,0,0,0,0,0,0,0,0,0,0,0,0,0,0.15576171875,0,0,0,0,0,0,0,0,0,0,0.240776062011719,0,0,0,0,0,0,0,0,0,0,0.155326843261719,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.125,0,0,0,0,0,0,0,0,0,0,0,0,-4.15005493164062,0,0,0,0,0,0,0,0,0,0,0,0,0,0.247787475585938,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1661376953125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.248039245605469,0,0,0,0,0,0,0,0,0.165061950683594,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.243560791015625,0,0,0,0,0,0,0,0,0,0,0,0.129997253417969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.210243225097656,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.157951354980469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.216758728027344,0,0,0,0,0,0,0,0,0,0,0.178520202636719,0,0,0.418098449707031,0,0,0,0,0,0,0,0,0.305824279785156,0,0,0,0,0,0,1.92736053466797,0.336685180664062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.16530609130859,0,0,0,0,0,0,0,0,0,0,0,0.921974182128906,0,0.986366271972656,0,0,0.863449096679688,1.32933044433594,0,0,0,0.878456115722656,0,0,0,0,1.30864715576172,0,0,0,0,-1.18650817871094,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpPguRDA/file11b6d5edd582a.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nI needed to this for about fifty files though, so this was still slow enough to be somewhat frustrating. Now `xml2::as_list` is really killing us. \n\n## GPX reader version 3: now with more xml2\n\nLuckily, we can use `xml2` to manipulate the XML via a fast C package instead. For this next part I tried functions exported by `xml2` until they worked and occasionally read the documentation.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx_xml <- function(fname) {\n  # get the interested nodes\n  run_xml <- read_xml(fname)\n  trk <- xml_child(run_xml, 2)\n  trkseg <- xml_child(trk, 2)\n  trkpts <- xml_children(trkseg) # nodeset where each node is a GPS reading\n\n  # get the longitude and latitude for each node\n  latlon_list <- xml_attrs(trkpts)\n  latlon <- do.call(rbind, latlon_list)\n\n  # get the time and elevation for each node\n  ele_time_vec <- xml_text(xml_children(trkpts))\n  ele_time <- matrix(ele_time_vec, ncol = 2, byrow = TRUE)\n  colnames(ele_time) <- c(\"ele\", \"time\")\n\n  as_tibble(cbind(latlon, ele_time))\n}\n\nread_gpx3 <- function(fname) {\n  gps_df <- read_gpx_xml(fname) |> \n    select(lon, lat, everything())\n  get_metrics(gps_df)\n}\n\nresult_3 <- read_gpx3(fname)\nexpect_equal(expected, result_3) \n```\n:::\n\nAgain we see if there's anywhere else we can speed things up:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx3(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-0bdf1d39b3d77b4106b4\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0bdf1d39b3d77b4106b4\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,10,10,10,10,10,11,11,11,11,12,13,13,13,13,13,13,13,13,13,13,13,13,13],\"depth\":[6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"$\",\"xml_attrs.xml_node\",\"lapply\",\"xml_attrs.xml_nodeset\",\"read_gpx_xml\",\"read_gpx3\",\"[[\",\"lapply\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"FUN\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"isTRUE\",\"xml_text.xml_node\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx3\",\"FUN\",\"lapply\",\"packageDescription\",\"utils::packageVersion\",\".rlang_cli_compat\",\".rlang_cli_format_fallback\",\"signal\",\"lifecycle::signal_stage\",\"mutate_at\",\"get_metrics\",\"read_gpx3\",\"is_call\",\"quo_is_call\",\"expand_across\",\"mutate_cols\",\"mutate.data.frame\",\"mutate_at\",\"get_metrics\",\"read_gpx3\",\"<Anonymous>\",\"<Anonymous>\",\"is_symbol\",\"as_string\",\"as_label\",\"caller_arg\",\"arg_match0\",\"new_duration\",\"vec_ptype2.difftime.difftime\",\"<Anonymous>\",\"vec_cast_common\",\"dplyr_vec_cast_common\",\"mutate_cols\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx3\",\"stopifnot\",\".fn\",\".f\",\"map2_dbl\",\"ncol\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"nrow\",\".fn\",\".f\",\"map2_dbl\",\"standardGeneric\",\"vctrs::vec_as_subscript\",\"as_indices_impl\",\"as_indices_sel_impl\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\",\"get_metrics\",\"read_gpx3\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[36.3038024902344,36.3038024902344,36.3038024902344,36.3038024902344,36.3038024902344,36.3038024902344,36.5493392944336,36.5493392944336,36.5493392944336,36.5493392944336,36.5493392944336,36.5493392944336,37.1235275268555,37.1235275268555,37.1235275268555,37.1235275268555,37.1235275268555,37.1235275268555,37.1235275268555,37.4771881103516,37.4771881103516,37.4771881103516,37.4771881103516,37.4771881103516,37.4771881103516,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.7497253417969,37.9588775634766,37.9588775634766,37.9588775634766,37.9588775634766,37.9588775634766,37.9588775634766,37.9588775634766,37.9588775634766,40.9804916381836,40.9804916381836,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,41.6509170532227,43.0844650268555,43.0844650268555,43.0844650268555,43.0844650268555,43.9531555175781,43.9531555175781,43.9531555175781,43.9531555175781,43.9531555175781,45.2580108642578,45.2580108642578,45.2580108642578,45.2580108642578,46.1357192993164,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266,47.3197174072266],\"meminc\":[0,0,0,0,0,0,0.245536804199219,0,0,0,0,0,0.574188232421875,0,0,0,0,0,0,0.353660583496094,0,0,0,0,0,0.272537231445312,0,0,0,0,0,0,0,0,0,0,0.209152221679688,0,0,0,0,0,0,0,3.02161407470703,0,0.670425415039062,0,0,0,0,0,0,0,0,0,0,0,0,0,1.43354797363281,0,0,0,0.868690490722656,0,0,0,0,1.30485534667969,0,0,0,0.877708435058594,1.18399810791016,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpPguRDA/file11b6d7410276e.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nWe're way faster, taking less than half a second! Now the most time is spent on `raster::pointDistance`, which we call a ton of times. What does `pointDistance` do? It takes two pairs `(lat1, lon1)` and `(lat2, lon2)` the distance between them[^2].\n\n[^2]: We can't calculate the distance using the L2 norm because longitude and latitude are spherical coordinates, not Euclidean coordinates.\n\n## GPX reader version 4: drop into Rcpp\n\nNext I Googled how to perform this calculation myself and found [this](http://www.movable-type.co.uk/scripts/latlong.html#ellipsoid) and [this](https://www.r-bloggers.com/great-circle-distance-calculations-in-r/). The `Rcpp` implementation looks like:\n\n::: {.cell}\n\n```{.rcpp .cell-code}\n#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble haversine_dist(const NumericVector p1, const NumericVector p2) {\n  \n  double lat1 = p1[0] * M_PI / 180;\n  double lon1 = p1[1] * M_PI / 180;\n  double lat2 = p2[0] * M_PI / 180;\n  double lon2 = p2[1] * M_PI / 180;\n  \n  double d_lat = lat2 - lat1;\n  double d_lon = lon2 - lon1;\n  \n  double a = pow(sin(d_lat / 2.0), 2) + \n    cos(lat1) * cos(lat2) * pow(sin(d_lon / 2.0), 2);\n  double c = 2 * asin(std::min(1.0, sqrt(a)));\n  \n  return 6378137 * c; // 6378137 is the radius of the earth in meters\n}\n```\n:::\n\nThe haversine distance is fast to calculate at the cost of some small error, which we can see below:\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- c(0, 0)\np2 <- c(1, 1)\n\ndist_expected <- raster::pointDistance(p1, p2, lonlat = TRUE)\ndist_result <- haversine_dist(p1, p2)\n\ndist_result - dist_expected\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 525.9688\n```\n:::\n:::\n\nIt turns out that \"small error\" on the geological scale is big error on the neighborhood run scale. Put all together, the C++ version looks like:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx4 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df, dist_func = haversine_dist)\n}\n```\n:::\n\nWe profile one more time:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx4(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-7e32def9488c122c2788\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7e32def9488c122c2788\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,7,8,8],\"depth\":[4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,2,1],\"label\":[\"lapply\",\"xml_attrs.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"structure\",\"FUN\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx4\",\"xml_nodeset\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx4\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"withCallingHandlers\",\"mutate_cols\",\"mutate.data.frame\",\"mutate_at\",\"get_metrics\",\"read_gpx4\",\"substr\",\".str_sub\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"attributes\",\".f\",\"map2_dbl\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[36.2521591186523,36.2521591186523,36.2521591186523,36.2521591186523,36.5422286987305,36.5422286987305,36.5422286987305,36.5422286987305,36.5422286987305,36.5422286987305,36.5422286987305,36.5422286987305,37.2029876708984,37.2029876708984,37.2029876708984,37.2029876708984,37.2029876708984,37.2029876708984,37.4144821166992,37.4144821166992,37.4144821166992,37.4144821166992,37.7241668701172,37.7241668701172,37.7241668701172,37.7241668701172,37.7241668701172,37.7241668701172,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,39.6693954467773,41.1691436767578,44.7509307861328,44.7509307861328],\"meminc\":[0,0,0,0,0.290069580078125,0,0,0,0,0,0,0,0.660758972167969,0,0,0,0,0,0.211494445800781,0,0,0,0.309684753417969,0,0,0,0,0,1.94522857666016,0,0,0,0,0,0,0,0,0,0,0,1.49974822998047,3.581787109375,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpPguRDA/file11b6d6911b813.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nNow it takes only about 0.1 seconds, but the result isn't accurate enough anymore. I wasn't in the mood to implement a more precise great circle distance calculation, but hopefully this illustrates the general principle of dropping into `Rcpp` and also why it's important to test when profiling.\n\n## Comparing the various GPX readers\n\nNow we can compare how long each version takes using the `bench` package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bench)\n\nmark(\n  read_gpx0(fname),\n  read_gpx1(fname),\n  read_gpx2(fname),\n  read_gpx3(fname),\n  read_gpx4(fname),\n  iterations = 5, # how many times to run everything. 5 is very low.\n  relative = TRUE,\n  check = FALSE # since readgpx4 isn't right, will error without this\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  expression         min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>       <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 read_gpx0(fname)  2.88   3.03      5.64      1.09     1.06\n2 read_gpx1(fname) 17.1   18.3       1         1.27     1   \n3 read_gpx2(fname)  4.97   4.97      3.65      1.03     1.14\n4 read_gpx3(fname)  1.59   1.60     11.2       1.00     1.40\n5 read_gpx4(fname)  1      1        16.9       1        1.05\n```\n:::\n:::\n\nHere timings are relative. We see that `read_gpx4` is about ten times faster than `read_gpx1` and two times faster than `read_gpx0`.\n\n## Embarrassing parallelization with `furrr`\n\nIn the end, I needed to do this for about fifty files. Since we can process each file independently of the other files, this operation is *embarrassingly parallel*. I actually wanted to use this data, so I didn't use the C++ haversine distance function. We can write with a single `map` call to process all the files at once:\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nrun_files_subset <- run_files[1:10]\n\nmap_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,780 × 11\n   run     lon   lat time                seg…¹ seg…²      dx      dt speed  pace\n   <chr> <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl>\n 1 1     -95.4  29.7 2017-10-29 18:31:00     2 907 … 0.00250 2.78e-4  9.00  6.67\n 2 1     -95.4  29.7 2017-10-29 18:31:01     2 907 … 0.00245 2.78e-4  8.81  6.81\n 3 1     -95.4  29.7 2017-10-29 18:31:02     2 907 … 0.00234 2.78e-4  8.41  7.13\n 4 1     -95.4  29.7 2017-10-29 18:31:03     2 907 … 0.00289 2.78e-4 10.4   5.77\n 5 1     -95.4  29.7 2017-10-29 18:31:04     2 907 … 0.00341 2.78e-4 12.3   4.88\n 6 1     -95.4  29.7 2017-10-29 18:31:05     2 907 … 0.00315 2.78e-4 11.4   5.29\n 7 1     -95.4  29.7 2017-10-29 18:31:06     2 907 … 0.00761 2.78e-4 27.4   2.19\n 8 1     -95.4  29.7 2017-10-29 18:31:08     2 907 … 0.00244 5.56e-4  4.39 13.7 \n 9 1     -95.4  29.7 2017-10-29 18:31:09     2 907 … 0.00322 2.78e-4 11.6   5.18\n10 1     -95.4  29.7 2017-10-29 18:31:11     2 907 … 0.00349 5.56e-4  6.28  9.55\n# … with 11,770 more rows, abbreviated variable names ¹​segment, ²​seg_length,\n#   and 1 more variable: elev <dbl>\n```\n:::\n:::\n\nWhich means we can also write this as a parallelized `map` call with `furrr` like so:\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nlibrary(furrr)\nplan(multiprocess, workers = 12)\n\nfuture_map_dfr(run_files, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 59,833 × 11\n   run     lon   lat time                seg…¹ seg…²      dx      dt speed  pace\n   <chr> <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl>\n 1 1     -95.4  29.7 2017-10-29 18:31:00     2 907 … 0.00250 2.78e-4  9.00  6.67\n 2 1     -95.4  29.7 2017-10-29 18:31:01     2 907 … 0.00245 2.78e-4  8.81  6.81\n 3 1     -95.4  29.7 2017-10-29 18:31:02     2 907 … 0.00234 2.78e-4  8.41  7.13\n 4 1     -95.4  29.7 2017-10-29 18:31:03     2 907 … 0.00289 2.78e-4 10.4   5.77\n 5 1     -95.4  29.7 2017-10-29 18:31:04     2 907 … 0.00341 2.78e-4 12.3   4.88\n 6 1     -95.4  29.7 2017-10-29 18:31:05     2 907 … 0.00315 2.78e-4 11.4   5.29\n 7 1     -95.4  29.7 2017-10-29 18:31:06     2 907 … 0.00761 2.78e-4 27.4   2.19\n 8 1     -95.4  29.7 2017-10-29 18:31:08     2 907 … 0.00244 5.56e-4  4.39 13.7 \n 9 1     -95.4  29.7 2017-10-29 18:31:09     2 907 … 0.00322 2.78e-4 11.6   5.18\n10 1     -95.4  29.7 2017-10-29 18:31:11     2 907 … 0.00349 5.56e-4  6.28  9.55\n# … with 59,823 more rows, abbreviated variable names ¹​segment, ²​seg_length,\n#   and 1 more variable: elev <dbl>\n```\n:::\n:::\n\nNote that other than loading `furrr` and calling `plan(multiprocess)` all we've had to do to get parallelism is to call `furrr::future_map_dfr`, which has exactly the same API as `purrr::map_dfr`. My computer has twelve cores, meaning there's a maximum possible speedup of twelve.\n\n::: {.cell}\n\n```{.r .cell-code}\nmark(\n  sequential = map_dfr(run_files, read_gpx3, .id = \"run\"),\n  parallel = future_map_dfr(run_files, read_gpx3, .id = \"run\"),\n  iterations = 5,\n  memory = FALSE,\n  relative = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 sequential  5.00   4.55      1           NA     1   \n2 parallel    1      1         4.50        NA     4.10\n```\n:::\n:::\n\n## Wrap Up\n\nThis was a low stakes exercise in speeding up R code. By the time I'd written all of these it would have been several hundred times faster to use `read_gpx0` and just save the results to a `.rds` file. Still, it was fun to work through the profiling workflow and I look forward to enterprising strangers on the internet pointing out places where things can get faster still.\n\nSee also [`gpx`](https://cran.r-project.org/package=gpx) for a more modern approach to reading `.gpx` files in R that did not exist at the time I originally wrote this blogpost.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<script src=\"../../site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"../../site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"../../site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"../../site_libs/highlight-6.2.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/highlight-6.2.0/highlight.js\"></script>\n<script src=\"../../site_libs/profvis-binding-0.3.7.9000/profvis.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}