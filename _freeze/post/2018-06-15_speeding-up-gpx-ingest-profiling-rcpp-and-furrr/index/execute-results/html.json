{
  "hash": "590a38ba24a228ad2f4084b08e10546f",
  "result": {
    "markdown": "---\ntitle: \"speeding up GPX ingest: profiling, Rcpp and furrr\"\nsubtitle: |\n  a demonstration of how to profile r code on a toy problem\ndate: \"2018-06-15\"\ncategories: [code performance, rstats]\nexecute: \n  error: true\n---\n\nThis post is a casual case study in speeding up R code. I work through several iterations of a function to read and process GPS running data from Strava stored in the GPX format. Along the way I describe how to visualize code bottlenecks with `profvis` and briefly touch on fast compiled code with `Rcpp` and parallelization with `furrr`.\n\n## The problem: tidying trajectories in GPX files\n\nI record my runs on my phone using Strava. Strava stores the GPS recordings in GPX files, which are XML files that follow some additional conventions. They start with some metadata and then contain a list of GPS readings taken at one second intervals with longitude, latitude, elevation and timestap information. I wanted to approximate my speed at each time point in the GPS record, as well as my distance traveled since the previous GPS recordings.\n\nBelow I have an example of a GPX file that contains three GPS readings. First I create a vector that contains the names off my GPX files, and then I subset to the files that contain running data. I choose to work with the third run as a canonical example, and show a subset of the recording with three GPS readings.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────── tidyverse 1.3.1.9000 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.3.5.9000     ✔ purrr   0.3.4.9000\n✔ tibble  3.1.7.9000     ✔ dplyr   1.0.8.9000\n✔ tidyr   1.2.0.9000     ✔ stringr 1.4.0.9000\n✔ readr   2.1.2.9000     ✔ forcats 0.5.1.9000\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /dabox/hayes/quarto-blog\n```\n:::\n\n```{.r .cell-code}\n# file contain run data\nact_files <- dir(here::here(\"post\", \"2018-06-15_speeding-up-gpx-ingest-profiling-rcpp-and-furrr\", \"2018-04-17-activities-alex\"),\n                 full.names = TRUE)\nrun_files <- act_files[str_detect(act_files, \"Run\")]\n\n# example file we'll work with\nfname <- run_files[3]\n\n# subset of example\nall <- read_lines(fname)\nmini_idx <- c(1:20, 5897:5899)\ncat(all[mini_idx], sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gpx creator=\"StravaGPX Android\" version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n <metadata>\n  <time>2017-10-31T17:58:22Z</time>\n </metadata>\n <trk>\n  <name>analytically slow</name>\n  <trkseg>\n   <trkpt lat=\"29.7169490\" lon=\"-95.3978210\">\n    <ele>14.1</ele>\n    <time>2017-10-31T17:58:22Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7168040\" lon=\"-95.3977180\">\n    <ele>14.4</ele>\n    <time>2017-10-31T17:58:29Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7167480\" lon=\"-95.3976890\">\n    <ele>14.5</ele>\n    <time>2017-10-31T17:58:30Z</time>\n   </trkpt>\n  </trkseg>\n </trk>\n</gpx>\n```\n:::\n:::\n\nThe part we want is in the `<trkseg>` tags. We'd like to turn this into a tidy dataframe where each row represents one GPS reading and the columns contain information like speed, distance, traveled, elevation gained, etc.\n\n## GPX reader version 0: using plotKML::readGPX\n\nUsing `plotKML::readGPX` we can read the representative file into R:\n\n::: {.cell}\n\n```{.r .cell-code}\ntrajectory <- gpx::read_gpx(fname)$tracks |> \n  as_tibble() |> \n  unnest() |> \n  janitor::clean_names() |> \n  select(-extensions, segment_id)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n```{.r .cell-code}\ntrajectory\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 5\n   elevation time                latitude longitude segment_id\n       <dbl> <dttm>                 <dbl>     <dbl>      <int>\n 1      14.1 2017-10-31 17:58:22     29.7     -95.4          1\n 2      14.4 2017-10-31 17:58:29     29.7     -95.4          1\n 3      14.5 2017-10-31 17:58:30     29.7     -95.4          1\n 4      14.6 2017-10-31 17:58:31     29.7     -95.4          1\n 5      14.6 2017-10-31 17:58:32     29.7     -95.4          1\n 6      14.7 2017-10-31 17:58:33     29.7     -95.4          1\n 7      14.7 2017-10-31 17:58:34     29.7     -95.4          1\n 8      14.7 2017-10-31 17:58:36     29.7     -95.4          1\n 9      14.7 2017-10-31 17:58:37     29.7     -95.4          1\n10      14.7 2017-10-31 17:58:38     29.7     -95.4          1\n# … with 1,462 more rows\n```\n:::\n:::\n\nWe want to compare location at $t$ and $t - 1$, so we create a lagged column of longitudes and latitudes. We put longitude and latitude together into a vector to play well with `raster::pointDistance`, which we'll use to compute the great circle distance between two points.\n\n::: {.cell}\n\n```{.r .cell-code}\nlagged <- trajectory |> \n    mutate(x = map2(longitude, latitude, c),  # create lagged position, this means the \n           x_old = lag(x),         # first row isn't complete\n           t_old = lag(time)) |> \n    slice(-1)                      # remove incomplete first row\n\nlagged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,471 × 8\n   eleva…¹ time                lat…² lon…³ seg…⁴ x     x_old t_old              \n     <dbl> <dttm>              <dbl> <dbl> <int> <lis> <lis> <dttm>             \n 1    14.4 2017-10-31 17:58:29  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:22\n 2    14.5 2017-10-31 17:58:30  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:29\n 3    14.6 2017-10-31 17:58:31  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:30\n 4    14.6 2017-10-31 17:58:32  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:31\n 5    14.7 2017-10-31 17:58:33  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:32\n 6    14.7 2017-10-31 17:58:34  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:33\n 7    14.7 2017-10-31 17:58:36  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:34\n 8    14.7 2017-10-31 17:58:37  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:36\n 9    14.7 2017-10-31 17:58:38  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:37\n10    14.7 2017-10-31 17:58:39  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:38\n# … with 1,461 more rows, and abbreviated variable names ¹​elevation, ²​latitude,\n#   ³​longitude, ⁴​segment_id\n```\n:::\n:::\n\nIt turns out this data is not contiguous. Strava has a feature called autopause which detects pauses in runs (for example, at a stoplight), and GPS readings during paused periods are not include in the GPX files[^1]. GPS readings typically happen once every second. I plotted the time gaps between readings and realized that time gaps greater than three seconds between two GPS recordings indicated a pause. This lets me break the run down into a series of contigous segments:\n\n[^1]: It took me a two months to realize this, mostly because I didn't plot enough of the data. If you're curous how Strava detects paused movement, you can read more [here](https://medium.com/strava-engineering/improving-auto-pause-for-everyone-13f253c66f9e). It seems to involve more if-statements than fun models.\n\n::: {.cell}\n\n```{.r .cell-code}\nsegmented <- lagged |> \n  mutate(rest = as.numeric(time - t_old),     # seconds\n         new_segment = as.numeric(rest > 3),  \n         segment = cumsum(new_segment)) |>\n  \n  # don't want t_old to be from previous segment\n  group_by(segment) |> \n  slice(-1)  \n    \nsegmented\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 11\n# Groups:   segment [5]\n   eleva…¹ time                lat…² lon…³ seg…⁴ x     x_old t_old              \n     <dbl> <dttm>              <dbl> <dbl> <int> <lis> <lis> <dttm>             \n 1    14.5 2017-10-31 17:58:30  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:29\n 2    14.6 2017-10-31 17:58:31  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:30\n 3    14.6 2017-10-31 17:58:32  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:31\n 4    14.7 2017-10-31 17:58:33  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:32\n 5    14.7 2017-10-31 17:58:34  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:33\n 6    14.7 2017-10-31 17:58:36  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:34\n 7    14.7 2017-10-31 17:58:37  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:36\n 8    14.7 2017-10-31 17:58:38  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:37\n 9    14.7 2017-10-31 17:58:39  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:38\n10    14.6 2017-10-31 17:58:40  29.7 -95.4     1 <dbl> <dbl> 2017-10-31 17:58:39\n# … with 1,454 more rows, abbreviated variable names ¹​elevation, ²​latitude,\n#   ³​longitude, ⁴​segment_id, and 3 more variables: rest <dbl>,\n#   new_segment <dbl>, segment <dbl>\n```\n:::\n:::\n\nNow I calculate some information about each time point and segment that I'll use in downstream analyses:\n\n::: {.cell}\n\n```{.r .cell-code}\nlonlat_dist <- partial(raster::pointDistance, lonlat = TRUE)\n\nuseful <- segmented |> \n  mutate(\n    seg_length = max(time) - min(t_old),    # seconds\n    dx = map2_dbl(x, x_old, lonlat_dist),   # meters\n    dx = 0.000621371 * dx,                  # miles\n    dt = rest / 60^2,                       # hours\n    speed = dx / dt,                        # mph\n    pace = 60 * dt / dx,                    # min / mile\n    elevation = elevation                   # feet\n  ) |> \n  dplyr::select(-elevation, -x, -x_old, -t_old, -new_segment) |> \n  ungroup()\n\nuseful\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 11\n   time                lat…¹ lon…² seg…³  rest seg…⁴ seg…⁵      dx      dt speed\n   <dttm>              <dbl> <dbl> <int> <dbl> <dbl> <drt>   <dbl>   <dbl> <dbl>\n 1 2017-10-31 17:58:30  29.7 -95.4     1     1     1 510 … 0.00423 2.78e-4 15.2 \n 2 2017-10-31 17:58:31  29.7 -95.4     1     1     1 510 … 0.00367 2.78e-4 13.2 \n 3 2017-10-31 17:58:32  29.7 -95.4     1     1     1 510 … 0.00197 2.78e-4  7.11\n 4 2017-10-31 17:58:33  29.7 -95.4     1     1     1 510 … 0.00483 2.78e-4 17.4 \n 5 2017-10-31 17:58:34  29.7 -95.4     1     1     1 510 … 0.00230 2.78e-4  8.28\n 6 2017-10-31 17:58:36  29.7 -95.4     1     2     1 510 … 0.00410 5.56e-4  7.38\n 7 2017-10-31 17:58:37  29.7 -95.4     1     1     1 510 … 0.00243 2.78e-4  8.75\n 8 2017-10-31 17:58:38  29.7 -95.4     1     1     1 510 … 0.00316 2.78e-4 11.4 \n 9 2017-10-31 17:58:39  29.7 -95.4     1     1     1 510 … 0.00415 2.78e-4 15.0 \n10 2017-10-31 17:58:40  29.7 -95.4     1     1     1 510 … 0.00363 2.78e-4 13.1 \n# … with 1,454 more rows, abbreviated variable names ¹​latitude, ²​longitude,\n#   ³​segment_id, ⁴​segment, ⁵​seg_length, and 1 more variable: pace <dbl>\n```\n:::\n:::\n\nWe can quickly visualize instantaneous speed throughout the run:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(useful, aes(time, speed, group = segment)) +\n  geom_point() +\n  geom_line(alpha = 0.5) +\n  labs(title = \"Speed throughout example run\",\n       y = \"Speed (mph)\") +\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nWe can see two short pauses present in the run at around 18:08 and 18:17.\n\nWe're going to use the code above a whole bunch, so we wrap it up into a helper function. I'm not sure that `raster::pointDistance` is the best option for calculating the distance between two points, so we use a `dist_func` argument to make it easy to switch out.\n\n::: {.cell}\n\n```{.r .cell-code}\nget_metrics <- function(gps_df, dist_func = lonlat_dist)  {\n  gps_df |> \n    mutate(x = map2(longitude, latitude, c),\n           x_old = lag(x),\n           t_old = lag(time)) |> \n    slice(-1) |> \n    mutate(rest = as.numeric(time - t_old),\n           new_segment = as.numeric(rest > 3),\n           segment = cumsum(new_segment) + 1) |>\n    group_by(segment) |> \n    slice(-1) |>\n    mutate(seg_length = max(time) - min(t_old),\n           dx = map2_dbl(x, x_old, dist_func),\n           dx = 0.000621371 * dx, \n           dt = rest / 60^2,    \n           speed = dx / dt,       \n           pace = 60 * dt / dx) |>\n    dplyr::select(-x, -x_old, -t_old, -new_segment, -rest) |> \n    ungroup()\n}\n```\n:::\n\nThis means our initial `read_gpx` function is just two lines:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx0 <- function(fname) {\n  gps_df <- gpx::read_gpx(fname)$tracks |> \n    as_tibble() |> \n    unnest() |> \n    janitor::clean_names() |> \n    select(-extensions, -segment_id)\n  \n  get_metrics(gps_df)\n}\n```\n:::\n\nWe can use `profvis::profvis` to create an interactive visualization of how long it takes to read the example file.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(profvis)\n\nprofvis(read_gpx0(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-0d39efac4ddb342bcda1\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-0d39efac4ddb342bcda1\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,2,2,2,3,3,3,3,4,5,5,5,6,6,6,7,8,8,8,8,9,10,11,11,12,12,12,12,12,13,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,33,34,35,35,35,35,36,37,37,37,37,37,37,37,37,37,37,37,37],\"depth\":[4,3,2,1,3,2,1,4,3,2,1,1,3,2,1,3,2,1,1,4,3,2,1,1,1,2,1,5,4,3,2,1,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,1,1,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"doWithOneRestart\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"findRestart\",\"tryInvokeRestart\",\"<Anonymous>\",\"$<-\",\"makeRestartList\",\"withRestarts\",\".signalSimpleWarning\",\".Call\",\"makeRestartList\",\"withRestarts\",\".signalSimpleWarning\",\"makeRestartList\",\"withRestarts\",\".signalSimpleWarning\",\".Call\",\"doWithOneRestart\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"is.na\",\".Call\",\"simpleWarning\",\".signalSimpleWarning\",\"lapply\",\"docall\",\"withOneRestart\",\"withRestarts\",\".signalSimpleWarning\",\"c\",\"[[\",\"lapply\",\"xml_attrs.xml_nodeset\",\"rvest::html_attrs\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first.xml_node\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_attr.xml_node\",\"vapply\",\"xml_attr.xml_nodeset\",\"rvest::html_attr\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first.xml_node\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first.xml_node\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_text.xml_node\",\"vapply\",\"xml_text.xml_nodeset\",\"rvest::html_text\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"paste\",\".str_sub\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_iso_dt\",\".local\",\"lubridate::as_datetime\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"vapply\",\"xml_attr.xml_nodeset\",\"rvest::html_attr\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"vapply\",\"xml_text.xml_nodeset\",\"rvest::html_text\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"<GC>\",\"vapply\",\"xml_attr.xml_nodeset\",\"rvest::html_attr\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"$\",\"xml_attr.xml_node\",\"vapply\",\"xml_attr.xml_nodeset\",\"rvest::html_attr\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"xml_find_first\",\"FUN\",\"lapply\",\"xml_find_first.xml_nodeset\",\"html_element.default\",\"rvest::html_node\",\"extract_feature\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"$\",\"FUN\",\"lapply\",\"xml_find_all.xml_nodeset\",\"html_elements.default\",\"rvest::html_nodes\",\"extract_extensions\",\"FUN\",\"lapply\",\"extract_tracks\",\"gpx::read_gpx\",\"read_gpx0\",\"lapply\",\"docall\",\"withOneRestart\",\"withRestarts\",\"warning\",\"warn\",\"unnest\",\"read_gpx0\",\"is_formula\",\"is_bare_formula\",\"as_quosure\",\"eval_context\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\",\"read_gpx0\",\"grep\",\"detect_dot_dot\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"lst_to_tibble\",\"as_tibble.data.frame\",\"group_data.tbl_df\",\"group_vars.data.frame\",\"initialize\",\"DataMask$new\",\"mutate_cols\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx0\",\"rm\",\"mask$forget\",\"slice_rows\",\"slice.data.frame\",\"get_metrics\",\"read_gpx0\",\".Call\",\".Call\",\"stopifnot\",\".fn\",\".f\",\"map2_dbl\",\"standardGeneric\",\"env_has\",\"eval_sym\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\",\"get_metrics\",\"read_gpx0\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[32.8813858032227,32.8813858032227,32.8813858032227,32.8813858032227,33.1145477294922,33.1145477294922,33.1145477294922,33.4734725952148,33.4734725952148,33.4734725952148,33.4734725952148,33.7066955566406,34.0584716796875,34.0584716796875,34.0584716796875,34.2892761230469,34.2892761230469,34.2892761230469,34.5865325927734,34.809326171875,34.809326171875,34.809326171875,34.809326171875,35.1340560913086,35.3632507324219,35.679801940918,35.679801940918,35.9678039550781,35.9678039550781,35.9678039550781,35.9678039550781,35.9678039550781,36.2049026489258,36.4344940185547,36.4344940185547,36.4344940185547,36.4344940185547,36.4344940185547,36.4344940185547,36.4344940185547,36.4344940185547,36.4344940185547,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.571533203125,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.6487655639648,36.8565292358398,36.8565292358398,36.8565292358398,36.8565292358398,36.8565292358398,36.8565292358398,36.8565292358398,36.8565292358398,36.8565292358398,36.8565292358398,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,36.9176864624023,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.0248565673828,37.1563034057617,37.1563034057617,37.1563034057617,37.1563034057617,37.1563034057617,37.1563034057617,37.1563034057617,37.1563034057617,37.1563034057617,37.1563034057617,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,39.7833404541016,40.1606903076172,40.1606903076172,40.1606903076172,40.1606903076172,40.1606903076172,40.1606903076172,40.1606903076172,40.1606903076172,40.1606903076172,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.2352294921875,40.3098220825195,40.3098220825195,40.3098220825195,40.3098220825195,40.3098220825195,40.3098220825195,40.3098220825195,40.3098220825195,40.3098220825195,32.7684326171875,32.7684326171875,32.7684326171875,32.7684326171875,32.7684326171875,32.7684326171875,32.7684326171875,32.7684326171875,32.7684326171875,32.7684326171875,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.7771530151367,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.8620834350586,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,32.9888305664062,33.0790328979492,33.0790328979492,33.0790328979492,33.0790328979492,33.0790328979492,33.0790328979492,33.0790328979492,33.0790328979492,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.3999481201172,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,33.7623596191406,34.3032608032227,34.3032608032227,34.3032608032227,34.3032608032227,34.3032608032227,34.3032608032227,35.7930145263672,36.7145004272461,38.085693359375,38.085693359375,38.085693359375,38.085693359375,38.9533538818359,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805,40.1852951049805],\"meminc\":[0,0,0,0,0.233161926269531,0,0,0.358924865722656,0,0,0,0.233222961425781,0.351776123046875,0,0,0.230804443359375,0,0,0.297256469726562,0.222793579101562,0,0,0,0.324729919433594,0.229194641113281,0.316551208496094,0,0.288002014160156,0,0,0,0,0.237098693847656,0.229591369628906,0,0,0,0,0,0,0,0,0.137039184570312,0,0,0,0,0,0,0,0,0,0,0,0.0772323608398438,0,0,0,0,0,0,0,0,0,0,0,0.207763671875,0,0,0,0,0,0,0,0,0,0.0611572265625,0,0,0,0,0,0,0,0,0,0,0,0.107170104980469,0,0,0,0,0,0,0,0,0,0,0,0.131446838378906,0,0,0,0,0,0,0,0,0,2.62703704833984,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.377349853515625,0,0,0,0,0,0,0,0,0.0745391845703125,0,0,0,0,0,0,0,0,0,0,0,0.0745925903320312,0,0,0,0,0,0,0,0,-7.54138946533203,0,0,0,0,0,0,0,0,0,0.00872039794921875,0,0,0,0,0,0,0,0,0,0,0.084930419921875,0,0,0,0,0,0,0,0,0,0,0,0.126747131347656,0,0,0,0,0,0,0,0,0,0,0,0.0902023315429688,0,0,0,0,0,0,0,0.320915222167969,0,0,0,0,0,0,0,0,0,0,0,0,0.362411499023438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.540901184082031,0,0,0,0,0,1.48975372314453,0.921485900878906,1.37119293212891,0,0,0,0.867660522460938,1.23194122314453,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpQsuGec/file2d68a35994074.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nIn the default view, the horizontal axis represents time and the box represents the call stack. All the boxes above `plotKML::readGPX` are functions called by `plotKML::readGPX`. Here it seems like `plotKML::readGPX` takes about 400 milliseconds to run. So about half the time is spent reading in the file, and half calculating metrics. Most of the time calculating metrics is in `raster::pointDistance`, which is fairly up the call stack - you may have to click and drag the plot to see it.\n\n## GPX reader version 1: no more plotKML::GPX\n\nThen I broke my R library and couldn't use `plotKML::readGPX` for a little while. Since GPX files are XML files, I used the `xml2` package as a replacement. `xml2` has a function `as_list` that let me treat the XML as an R list. We extract the relevant portion of the list and `purrr::map_dfr` each GPS recording into a row of a `tibble`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n\nrun_xml <- read_xml(fname)\nrun_list <- as_list(run_xml)\ngps_pts <- run_list$gpx$trk$trkseg\n\nextract_gps_point <- function(point) {\n  tibble(\n    longitude = attr(point, \"lon\"),\n    latitude = attr(point, \"lat\"),\n    ele = point$ele[[1]],\n    time = point$time[[1]]\n  )\n}\n\nmap_dfr(gps_pts, extract_gps_point)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n   longitude   latitude   ele   time                \n   <chr>       <chr>      <chr> <chr>               \n 1 -95.3978210 29.7169490 14.1  2017-10-31T17:58:22Z\n 2 -95.3977180 29.7168040 14.4  2017-10-31T17:58:29Z\n 3 -95.3976890 29.7167480 14.5  2017-10-31T17:58:30Z\n 4 -95.3976530 29.7167050 14.6  2017-10-31T17:58:31Z\n 5 -95.3976600 29.7166770 14.6  2017-10-31T17:58:32Z\n 6 -95.3976330 29.7166110 14.7  2017-10-31T17:58:33Z\n 7 -95.3976090 29.7165850 14.7  2017-10-31T17:58:34Z\n 8 -95.3975830 29.7165300 14.7  2017-10-31T17:58:36Z\n 9 -95.3975780 29.7164950 14.7  2017-10-31T17:58:37Z\n10 -95.3975630 29.7164510 14.7  2017-10-31T17:58:38Z\n# … with 1,462 more rows\n```\n:::\n:::\n\nThen we wrap this in a function.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx1 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n  \n  extract_gps_point <- function(point) {\n    tibble(\n      longitude = attr(point, \"lon\"),\n      latitude = attr(point, \"lat\"),\n      ele = point$ele[[1]],\n      time = point$time[[1]]\n    )\n  }\n  \n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n```\n:::\n\nThe next part is critical when trying to speed up code: **test that the new code does the same thing as the old code**.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(testthat)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'testthat'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    matches\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    is_null\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:readr':\n\n    edition_get, local_edition\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    matches\n```\n:::\n\n```{.r .cell-code}\nexpected <- read_gpx0(fname)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n```{.r .cell-code}\nresult_1 <- read_gpx1(fname)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `rest = as.numeric(time - t_old)`.\nCaused by error in `time - t_old`:\n! non-numeric argument to binary operator\n```\n:::\n\n```{.r .cell-code}\n# silence means everything went well\nexpect_equal(expected, result_1)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'result_1' not found\n```\n:::\n:::\n\nThis turned out to be too slow, so we profile and see which lines are taking the most amount of time.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx1(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `rest = as.numeric(time - t_old)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-f143eed88318fbd5b284\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f143eed88318fbd5b284\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,56,57,57,57,57,57,57,57,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,77,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,81,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,102,102,102,102,102,102,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,110,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,119,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,127,128,128,128,128,128,129,129,129,129,129],\"depth\":[15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,1,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,1,5,4,3,2,1,5,4,3,2,1],\"label\":[\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"length\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"any\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"match.fun\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\".Call\",\"match.fun\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"FUN\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"replace\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"replace\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.list.default\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_is_vector\",\"vec_is\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"stdin\",\"parse\",\".transformer\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is_symbol\",\"check_symbol\",\"check_arg\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"bind_args\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"parent.frame\",\"tryCatch\",\"<Anonymous>\",\"replace\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"mapply\",\"map2\",\"imap\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\"vapply\",\"map_mold\",\"map_lgl\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"add_to_env2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"map_mold\",\"map_lgl\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"environment\",\"quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grep\",\"detect_dot_dot\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"%||%\",\"<Anonymous>\",\"match.fun\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_is_vector\",\"vec_is\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"match.fun\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".transformer\",\"<Anonymous>\",\"expr_type_of\",\"switch_expr\",\"quo_squash_impl\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"match.fun\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"check_symbol\",\"check_arg\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\".transformer\",\"<Anonymous>\",\"is.numeric\",\"parse\",\".transformer\",\"<Anonymous>\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"parse\",\".transformer\",\"<Anonymous>\",\"match.fun\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"which\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_is_vector\",\"vec_is\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".Call\",\"eval\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map_mold\",\"map_lgl\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\".transformer\",\"<Anonymous>\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"environment\",\"list2\",\"<Anonymous>\",\"mapply\",\"map2\",\"imap\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"[.quosures\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"logical\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"add_to_env2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names2\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"validate_minimal_names\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"bind_args\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\".transformer\",\"<Anonymous>\",\"dim\",\"list2\",\"<Anonymous>\",\"mapply\",\"map2\",\"imap\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is_list\",\"new_environment\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"stdin\",\"parse\",\".transformer\",\"<Anonymous>\",\"%||%\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"environment\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"vec_size\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"%||%\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"as.symbol\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"%||%\",\"<Anonymous>\",\"eval\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_is_list\",\"<Anonymous>\",\".External2\",\"vec_assign\",\"pkg_version_info\",\"is_installed\",\"rlang_type_sum\",\"call_type_sum\",\"match_selector_node\",\"match_selector\",\"clii__container_start\",\".transformer\",\"<Anonymous>\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.7676620483398,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,34.9372100830078,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.1937484741211,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.3634185791016,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.6188812255859,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,35.7892913818359,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.0443267822266,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.2118148803711,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.4619369506836,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.6220703125,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,36.8685302734375,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.0324859619141,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.2790222167969,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.4432678222656,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.6894226074219,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,37.8532791137695,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.0995864868164,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.2617874145508,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,38.5045700073242,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.3841094970703,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.6375274658203,34.806266784668,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.0613708496094,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.230094909668,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.4852523803711,35.6581878662109,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,35.9172973632812,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.0882263183594,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.3371047973633,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.5062103271484,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.7419052124023,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,36.8744659423828,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.0738143920898,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.2062530517578,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.4065399169922,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.5388412475586,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.7388229370117,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,37.8710479736328,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.0680389404297,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,38.1819152832031,34.5423965454102,34.5423965454102,34.5423965454102,34.5423965454102,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.6754150390625,34.8764190673828,34.8764190673828,34.8764190673828,34.8764190673828,34.8764190673828,34.8764190673828,34.8764190673828,34.8764190673828,34.8764190673828,34.8764190673828,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.0110397338867,35.2128067016602,35.2128067016602,35.2128067016602,35.2128067016602,35.2128067016602,35.2128067016602,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.3480072021484,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.5494003295898,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.6822052001953,35.8818893432617,35.8818893432617,35.8818893432617,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.0041351318359,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.1683120727539,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.2882843017578,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.4759368896484,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.6074066162109,36.8061294555664,36.8061294555664,36.8061294555664,36.8061294555664,36.8061294555664,36.8061294555664,36.8061294555664,36.8061294555664,36.9371871948242,37.1355514526367,37.1355514526367,37.1355514526367,37.1355514526367,37.1355514526367,37.1355514526367,37.1355514526367,37.2665710449219,37.2665710449219,37.2665710449219,37.2665710449219,37.2665710449219,37.4311904907227,37.4311904907227,37.4311904907227,37.4311904907227,37.4311904907227,37.4311904907227,37.4311904907227,37.4311904907227,37.4311904907227,37.4311904907227,37.5613174438477,37.5613174438477,37.5613174438477,37.5613174438477,37.5613174438477,37.5613174438477,37.5613174438477,37.5613174438477,37.7383651733398,37.7383651733398,37.7383651733398,37.7383651733398,37.7383651733398,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,37.8685455322266,38.0050277709961,38.0050277709961,38.0050277709961,38.0050277709961,38.0050277709961,38.0050277709961,38.0050277709961,38.0050277709961,38.0050277709961,38.0050277709961,34.5693893432617,34.5693893432617,34.5693893432617,34.5693893432617,34.5693893432617,34.5693893432617,34.5693893432617,34.7703018188477,34.7703018188477,34.7703018188477,34.7703018188477,34.7703018188477,34.7703018188477,34.7703018188477,34.7703018188477,34.7703018188477,34.7703018188477,34.9017562866211,34.9017562866211,34.9017562866211,34.9017562866211,34.9017562866211,34.9017562866211,34.9017562866211,34.9017562866211,34.9017562866211,35.1031188964844,35.1031188964844,35.1031188964844,35.1031188964844,35.1031188964844,35.1031188964844,35.2308654785156,35.2308654785156,35.2308654785156,35.2308654785156,35.2308654785156,35.2308654785156,35.2308654785156,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.4015121459961,35.5291137695312,35.5291137695312,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.7191009521484,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,35.8473663330078,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.0412902832031,36.1623611450195,36.1623611450195,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.3390426635742,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.4521255493164,36.6250228881836,36.7518692016602,36.7518692016602,36.7518692016602,36.7518692016602,36.7518692016602,36.7518692016602,36.7518692016602,36.7518692016602,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,36.943229675293,37.0721282958984,37.0721282958984,37.0721282958984,37.2647552490234,37.3921813964844,37.3921813964844,37.3921813964844,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.5518341064453,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.6836853027344,37.8744125366211,37.8744125366211,37.8744125366211,37.8744125366211,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,37.9754028320312,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.5443115234375,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.6724472045898,34.8709411621094,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.0064697265625,35.2064743041992,35.2064743041992,35.2064743041992,35.2064743041992,35.2064743041992,35.2064743041992,35.2064743041992,35.2064743041992,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.3393478393555,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.5403060913086,35.6737289428711,35.6737289428711,35.6737289428711,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,35.8749160766602,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.0073928833008,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.2039031982422,36.3316192626953,36.3316192626953,36.3316192626953,36.3316192626953,36.3316192626953,36.3316192626953,36.3316192626953,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.5209350585938,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.6504898071289,36.8051681518555,36.8051681518555,36.8051681518555,36.8051681518555,36.8051681518555,36.8051681518555,36.9276428222656,36.9276428222656,36.9276428222656,36.9276428222656,36.9276428222656,36.9276428222656,37.0988388061523,37.0988388061523,37.0988388061523,37.0988388061523,37.0988388061523,37.0988388061523,37.0988388061523,37.2303771972656,37.2303771972656,37.2303771972656,37.2303771972656,37.2303771972656,37.2303771972656,37.2303771972656,37.2303771972656,37.2303771972656,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.4281692504883,37.5590896606445,37.5590896606445,37.5590896606445,37.5590896606445,37.5590896606445,37.5590896606445,37.5590896606445,37.5590896606445,37.5590896606445,37.5590896606445,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.7556915283203,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,37.8865814208984,38.0715942382812,38.0715942382812,38.0715942382812,34.5613403320312,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.7195816040039,34.8478393554688,34.8478393554688,34.8478393554688,34.8478393554688,34.8478393554688,34.8478393554688,34.8478393554688,34.8478393554688,35.0152053833008,35.0152053833008,35.0152053833008,35.0152053833008,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.1469192504883,35.346549987793,35.346549987793,35.346549987793,35.346549987793,35.346549987793,35.346549987793,35.4743728637695,35.4743728637695,35.4743728637695,35.4743728637695,35.4743728637695,35.4743728637695,35.4743728637695,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.6471328735352,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.7802124023438,35.9719848632812,36.0987548828125,36.0987548828125,36.0987548828125,36.0987548828125,36.0987548828125,36.0987548828125,36.0987548828125,36.0987548828125,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.2742614746094,36.405029296875,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.6038589477539,36.7361831665039,36.7361831665039,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,36.9361953735352,37.052375793457,37.052375793457,38.3782958984375,38.887825012207,38.887825012207,38.887825012207,38.887825012207,38.887825012207,39.076904296875,39.076904296875,39.076904296875,39.076904296875,39.076904296875],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.169548034667969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.256538391113281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.169670104980469,0,0,0,0,0,0,0,0,0,0,0,0,0,0.255462646484375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.17041015625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.255035400390625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.167488098144531,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2501220703125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.160133361816406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2464599609375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.163955688476562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.246536254882812,0,0,0,0,0,0,0,0,0,0,0.16424560546875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.24615478515625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.163856506347656,0,0,0,0,0,0,0,0,0,0,0,0,0,0.246307373046875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.162200927734375,0,0,0,0,0,0,0,0,0,0,0,0.242782592773438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.12046051025391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.25341796875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168739318847656,0.255104064941406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168724060058594,0,0,0,0,0,0,0,0,0,0,0,0,0.255157470703125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.172935485839844,0.259109497070312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.170928955078125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.248878479003906,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.169105529785156,0,0,0,0,0,0,0,0,0,0,0.235694885253906,0,0,0,0,0,0,0,0,0,0,0,0,0.132560729980469,0,0,0,0,0,0,0,0,0,0,0,0,0.199348449707031,0,0,0,0,0,0,0,0,0,0,0,0.132438659667969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.200286865234375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.132301330566406,0,0,0,0,0,0,0,0,0,0,0,0,0,0.199981689453125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.132225036621094,0,0,0,0,0,0,0,0,0,0,0,0,0.196990966796875,0,0,0,0,0,0,0,0,0,0,0,0,0,0.113876342773438,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.63951873779297,0,0,0,0.133018493652344,0,0,0,0,0,0,0,0,0,0,0,0.201004028320312,0,0,0,0,0,0,0,0,0,0.134620666503906,0,0,0,0,0,0,0,0,0,0,0,0,0.201766967773438,0,0,0,0,0,0.135200500488281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201393127441406,0,0,0,0,0,0,0,0,0,0,0,0,0.132804870605469,0,0,0,0,0,0,0,0,0,0,0,0,0.199684143066406,0,0,0.122245788574219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.164176940917969,0,0,0,0,0,0,0,0,0,0,0.119972229003906,0,0,0,0,0,0,0,0,0,0,0,0.187652587890625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1314697265625,0,0,0,0,0,0,0,0,0,0,0,0.198722839355469,0,0,0,0,0,0,0,0.131057739257812,0.1983642578125,0,0,0,0,0,0,0.131019592285156,0,0,0,0,0.164619445800781,0,0,0,0,0,0,0,0,0,0.130126953125,0,0,0,0,0,0,0,0.177047729492188,0,0,0,0,0.130180358886719,0,0,0,0,0,0,0,0,0,0,0.136482238769531,0,0,0,0,0,0,0,0,0,-3.43563842773438,0,0,0,0,0,0,0.200912475585938,0,0,0,0,0,0,0,0,0,0.131454467773438,0,0,0,0,0,0,0,0,0.201362609863281,0,0,0,0,0,0.12774658203125,0,0,0,0,0,0,0.170646667480469,0,0,0,0,0,0,0,0,0,0,0,0,0.127601623535156,0,0.189987182617188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.128265380859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0.193923950195312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.121070861816406,0,0.176681518554688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.113082885742188,0,0,0,0,0,0,0,0,0,0,0,0.172897338867188,0.126846313476562,0,0,0,0,0,0,0,0.191360473632812,0,0,0,0,0,0,0,0,0,0,0,0.128898620605469,0,0,0.192626953125,0.127426147460938,0,0,0.159652709960938,0,0,0,0,0,0,0,0,0,0,0,0,0.131851196289062,0,0,0,0,0,0,0,0,0,0,0,0,0.190727233886719,0,0,0,0.100990295410156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.43109130859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0.128135681152344,0,0,0,0,0,0,0,0,0,0,0,0,0,0.198493957519531,0.135528564453125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.200004577636719,0,0,0,0,0,0,0,0.13287353515625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.200958251953125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1334228515625,0,0,0.201187133789062,0,0,0,0,0,0,0,0,0,0,0,0,0.132476806640625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.196510314941406,0,0,0,0,0,0,0,0,0,0,0,0,0.127716064453125,0,0,0,0,0,0,0.189315795898438,0,0,0,0,0,0,0,0,0,0,0,0,0,0.129554748535156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.154678344726562,0,0,0,0,0,0.122474670410156,0,0,0,0,0,0.171195983886719,0,0,0,0,0,0,0.131538391113281,0,0,0,0,0,0,0,0,0.197792053222656,0,0,0,0,0,0,0,0,0,0,0,0.13092041015625,0,0,0,0,0,0,0,0,0,0.196601867675781,0,0,0,0,0,0,0,0,0,0,0,0,0.130889892578125,0,0,0,0,0,0,0,0,0,0,0,0,0.185012817382812,0,0,-3.51025390625,0.158241271972656,0,0,0,0,0,0,0,0,0,0,0,0.128257751464844,0,0,0,0,0,0,0,0.167366027832031,0,0,0,0.1317138671875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.199630737304688,0,0,0,0,0,0.127822875976562,0,0,0,0,0,0,0.172760009765625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.133079528808594,0,0,0,0,0,0,0,0,0,0,0,0,0.1917724609375,0.12677001953125,0,0,0,0,0,0,0,0.175506591796875,0,0,0,0,0,0,0,0,0,0,0,0,0,0.130767822265625,0.198829650878906,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13232421875,0,0.20001220703125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.116180419921875,0,1.32592010498047,0.509529113769531,0,0,0,0,0.189079284667969,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpQsuGec/file2d68a9f3c536.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nHere we see that we spend most of our time on the functions `as_list` and `tibble`.\n\n# GPX reader version 2: no more tibble\n\n`tibble`s are somewhat heavy objects, and we can bind lists together instead of `tibble`s, so let's try that next. We only change one line from `read_gpx1`.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx2 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n  \n  extract_gps_point <- function(point) {\n    list(longitude = attr(point, \"lon\"),\n         latitude = attr(point, \"lat\"),\n         ele = point$ele[[1]],\n         time = point$time[[1]])\n  }\n  \n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n\nresult_2 <- read_gpx2(fname)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `rest = as.numeric(time - t_old)`.\nCaused by error in `time - t_old`:\n! non-numeric argument to binary operator\n```\n:::\n\n```{.r .cell-code}\nexpect_equal(expected, result_2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'result_2' not found\n```\n:::\n:::\n\nOur results are still as expected, which is good.  We profile again to see if we've done any better, which we have. Now we're at about 1.5 seconds instead of 2.5 seconds.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx2(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `rest = as.numeric(time - t_old)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-f832ea26d7fc26ce0c26\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f832ea26d7fc26ce0c26\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,8,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36],\"depth\":[17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"$\",\"xml_attrs.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\".Call\",\"nodeset_apply\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"c\",\"length\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"any\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"%in%\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_type\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"<GC>\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"FUN\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"list\",\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"%in%\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"attr\",\"FUN\",\"vapply\",\".rlang_purrr_map_mold\",\"map_lgl\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\"vctrs::data_frame\",\"FUN\",\"lapply\",\"map\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\".External2\",\"is_environment\",\"<Anonymous>\",\"mapply\",\"map2\",\"trace_back\",\"abort\",\"h\",\".handleSimpleError\",\"[[\",\"clii__container_start\",\"clii_div\",\"<Anonymous>\",\"cli__fmt\",\"fmt\",\"cli::format_message\",\".rlang_cli_format_inline\",\"format_code\",\"format_error_call\",\"cnd_message_format_prefixed\",\"cnd_message\",\"conditionMessage.rlang_error\",\"signalCondition\",\"signal_abort\",\"abort\",\"h\",\".handleSimpleError\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,34.8926162719727,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.0606536865234,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.2932891845703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.4397735595703,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.6452331542969,35.8125610351562,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.0663681030273,36.2342681884766,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.4828872680664,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.64306640625,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,36.8865585327148,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.0492935180664,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.2938613891602,37.4575042724609,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.6991729736328,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,37.8621520996094,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.1083374023438,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.2711791992188,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.5125350952148,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,38.6078109741211,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.6421661376953,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,34.8102569580078,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.0636749267578,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.2325057983398,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.4859466552734,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.6548004150391,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,35.9068069458008,36.0741119384766,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.3245620727539,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.4856719970703,36.7783126831055,37.0862503051758,37.0862503051758,37.0862503051758,37.0862503051758,37.0862503051758,37.0862503051758,37.0862503051758,37.7595901489258,37.7595901489258,37.7595901489258,37.7595901489258,37.7595901489258,37.7595901489258,37.7595901489258,39.23193359375,40.0944671630859,40.0944671630859,40.0944671630859,40.0944671630859,40.0944671630859,40.0944671630859,40.0944671630859,40.0944671630859,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266,40.2279205322266],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168037414550781,0,0,0,0,0,0,0,0,0,0,0,0,0.232635498046875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.146484375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.205459594726562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.167327880859375,0.253807067871094,0,0,0,0,0,0,0,0,0,0,0,0,0.167900085449219,0.248619079589844,0,0,0,0,0,0,0,0,0,0,0,0.160179138183594,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.243492126464844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.162734985351562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.24456787109375,0,0,0,0,0,0,0,0,0,0,0,0.163642883300781,0.241668701171875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.162979125976562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.246185302734375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.162841796875,0,0,0,0,0,0,0,0,0,0,0,0.241355895996094,0,0,0,0,0,0,0,0,0,0,0,0.09527587890625,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.96564483642578,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1680908203125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.25341796875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168830871582031,0,0,0,0,0,0,0,0,0,0,0,0.253440856933594,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168853759765625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.252006530761719,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.167304992675781,0.250450134277344,0,0,0,0,0,0,0,0,0,0,0,0,0,0.161109924316406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.292640686035156,0.307937622070312,0,0,0,0,0,0,0.67333984375,0,0,0,0,0,0,1.47234344482422,0.862533569335938,0,0,0,0,0,0,0,0.133453369140625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpQsuGec/file2d68a41e19485.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nI needed to this for about fifty files though, so this was still slow enough to be somewhat frustrating. Now `xml2::as_list` is really killing us. \n\n## GPX reader version 3: now with more xml2\n\nLuckily, we can use `xml2` to manipulate the XML via a fast C package instead. For this next part I tried functions exported by `xml2` until they worked and occasionally read the documentation.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx_xml <- function(fname) {\n  # get the interested nodes\n  run_xml <- read_xml(fname)\n  trk <- xml_child(run_xml, 2)\n  trkseg <- xml_child(trk, 2)\n  trkpts <- xml_children(trkseg)  # nodeset where each node is a GPS reading\n  \n  # get the longitude and latitude for each node\n  latlon_list <- xml_attrs(trkpts)  \n  latlon <- do.call(rbind, latlon_list)\n  \n  # get the time and elevation for each node\n  ele_time_vec <- xml_text(xml_children(trkpts))\n  ele_time <- matrix(ele_time_vec, ncol = 2, byrow = TRUE)\n  colnames(ele_time) <- c(\"ele\", \"time\")\n  \n  as_tibble(cbind(latlon, ele_time))\n}\n\nread_gpx3 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df)\n}\n\nresult_3 <- read_gpx3(fname)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n\n```{.r .cell-code}\nexpect_equal(expected, result_3)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in eval_bare(expr, quo_get_env(quo)): object 'result_3' not found\n```\n:::\n:::\n\nAgain we see if there's anywhere else we can speed things up:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx3(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `x = map2(longitude, latitude, c)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-ea3626ec84ff56f8bffe\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ea3626ec84ff56f8bffe\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],\"depth\":[1,6,5,4,3,2,1,7,6,5,4,3,2,1,5,4,3,2,1,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\".Call\",\"[[\",\"lapply\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"FUN\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"FUN\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx3\",\"cbind\",\"read_gpx_xml\",\"read_gpx3\",\"match_selector_node\",\"match_selector\",\"clii__container_start\",\"clii_div\",\"<Anonymous>\",\"cli__fmt\",\"fmt\",\"cli_format\",\".rlang_cli_format\",\"cli_format\",\"cnd_message_format\",\"cnd_message\",\"conditionMessage.rlang_error\",\"signalCondition\",\"signal_abort\",\"abort\",\"h\",\".handleSimpleError\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[34.9829711914062,35.2284545898438,35.2284545898438,35.2284545898438,35.2284545898438,35.2284545898438,35.2284545898438,35.7302398681641,35.7302398681641,35.7302398681641,35.7302398681641,35.7302398681641,35.7302398681641,35.7302398681641,36.104248046875,36.104248046875,36.104248046875,36.104248046875,36.104248046875,36.3062057495117,36.3062057495117,36.3062057495117,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961,36.5685043334961],\"meminc\":[0,0.2454833984375,0,0,0,0,0,0.501785278320312,0,0,0,0,0,0,0.374008178710938,0,0,0,0,0.201957702636719,0,0,0.262298583984375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpQsuGec/file2d68a39389dec.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nWe're way faster, taking less than half a second! Now the most time is spent on `raster::pointDistance`, which we call a ton of times. What does `pointDistance` do? It takes two pairs `(lat1, lon1)` and `(lat2, lon2)` the distance between them[^2].\n\n[^2]: We can't calculate the distance using the L2 norm because longitude and latitude are spherical coordinates, not Euclidean coordinates.\n\n## GPX reader version 4: drop into Rcpp\n\nNext I Googled how to perform this calculation myself and found [this](http://www.movable-type.co.uk/scripts/latlong.html#ellipsoid) and [this](https://www.r-bloggers.com/great-circle-distance-calculations-in-r/). The `Rcpp` implementation looks like:\n\n::: {.cell}\n\n```{.rcpp .cell-code}\n#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble haversine_dist(const NumericVector p1, const NumericVector p2) {\n  \n  double lat1 = p1[0] * M_PI / 180;\n  double lon1 = p1[1] * M_PI / 180;\n  double lat2 = p2[0] * M_PI / 180;\n  double lon2 = p2[1] * M_PI / 180;\n  \n  double d_lat = lat2 - lat1;\n  double d_lon = lon2 - lon1;\n  \n  double a = pow(sin(d_lat / 2.0), 2) + \n    cos(lat1) * cos(lat2) * pow(sin(d_lon / 2.0), 2);\n  double c = 2 * asin(std::min(1.0, sqrt(a)));\n  \n  return 6378137 * c; // 6378137 is the radius of the earth in meters\n}\n```\n:::\n\nThe haversine distance is fast to calculate at the cost of some small error, which we can see below:\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- c(0, 0)\np2 <- c(1, 1)\n\ndist_expected <- raster::pointDistance(p1, p2, lonlat = TRUE)\ndist_result <- haversine_dist(p1, p2)\n\ndist_result - dist_expected\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 525.9688\n```\n:::\n:::\n\nIt turns out that \"small error\" on the geological scale is big error on the neighborhood run scale. Put all together, the C++ version looks like:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx4 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df, dist_func = haversine_dist)\n}\n```\n:::\n\nWe profile one more time:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx4(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nprofvis: code exited with error:\nProblem while computing `x = map2(longitude, latitude, c)`.\n```\n:::\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-32a1027a97469e0fa175\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-32a1027a97469e0fa175\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],\"depth\":[5,4,3,2,1,6,5,4,3,2,1,4,3,2,1,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"FUN\",\"lapply\",\"xml_attrs.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx4\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"FUN\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"unique.default\",\"setdiff\",\"clii__container_start\",\"FUN\",\"lapply\",\"clii_bullets\",\"<Anonymous>\",\"cli__fmt\",\"fmt\",\"cli_format\",\".rlang_cli_format\",\"cli_format\",\"cnd_message_format\",\"cnd_message\",\"conditionMessage.rlang_error\",\"signalCondition\",\"signal_abort\",\"abort\",\"h\",\".handleSimpleError\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[35.0790939331055,35.0790939331055,35.0790939331055,35.0790939331055,35.0790939331055,35.4143753051758,35.4143753051758,35.4143753051758,35.4143753051758,35.4143753051758,35.4143753051758,36.1502151489258,36.1502151489258,36.1502151489258,36.1502151489258,36.2431411743164,36.2431411743164,36.2431411743164,36.2431411743164,36.2431411743164,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086,36.6174545288086],\"meminc\":[0,0,0,0,0,0.335281372070312,0,0,0,0,0,0.73583984375,0,0,0,0.092926025390625,0,0,0,0,0.374313354492188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpQsuGec/file2d68a6a866ce4.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nNow it takes only about 0.1 seconds, but the result isn't accurate enough anymore. I wasn't in the mood to implement a more precise great circle distance calculation, but hopefully this illustrates the general principle of dropping into `Rcpp` and also why it's important to test when profiling.\n\n## Comparing the various GPX readers\n\nNow we can compare how long each version takes using the `bench` package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bench)\n\nmark(\n  read_gpx0(fname),\n  read_gpx1(fname),\n  read_gpx2(fname),\n  read_gpx3(fname),\n  read_gpx4(fname),\n  iterations = 5,   # how many times to run everything. 5 is very low.\n  relative = TRUE,\n  check = FALSE     # since readgpx4 isn't right, will error without this\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: `cols` is now required when using unnest().\nPlease use `cols = c(`analytically slow`)`\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `rest = as.numeric(time - t_old)`.\nCaused by error in `time - t_old`:\n! non-numeric argument to binary operator\n```\n:::\n:::\n\nHere timings are relative. We see that `read_gpx4` is about ten times faster than `read_gpx1` and two times faster than `read_gpx0`.\n\n## Embarrassing parallelization with `furrr`\n\nIn the end, I needed to do this for about fifty files. Since we can process each file independently of the other files, this operation is *embarrassingly parallel*. I actually wanted to use this data, so I didn't use the C++ haversine distance function. We can write with a single `map` call to process all the files at once:\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_files_subset <- run_files[1:10]\n\nmap_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n:::\n\nWhich means we can also write this as a parallelized `map` call with `furrr` like so:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(furrr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: future\n```\n:::\n\n```{.r .cell-code}\nplan(multiprocess)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Strategy 'multiprocess' is deprecated in future (>= 1.20.0). Instead,\nexplicitly specify either 'multisession' or 'multicore'. In the current R\nsession, 'multiprocess' equals 'multicore'.\n```\n:::\n\n```{.r .cell-code}\nfuture_map_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n:::\n\nNote that other than loading `furrr` and calling `plan(multiprocess)` all we've had to do to get parallelism is to call `furrr::future_map_dfr`, which has exactly the same API as `purrr::map_dfr`. My computer has two cores, meaning there's a maximum possible speedup of two, and we achieve nearly that:\n\n::: {.cell}\n\n```{.r .cell-code}\nmark( \n  map_dfr(run_files_subset, read_gpx3, .id = \"run\"),\n  future_map_dfr(run_files_subset, read_gpx3, .id = \"run\"),\n  iterations = 5,\n  relative = TRUE\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `mutate()`:\n! Problem while computing `x = map2(longitude, latitude, c)`.\nCaused by error in `map2()`:\n! object 'longitude' not found\n```\n:::\n:::\n\n## Wrap Up\n\nThis was a low stakes exercise in speeding up R code. By the time I'd written all of these it would have been several hundred times faster to use `read_gpx0` and just save the results to a `.rds` file. Still, it was fun to work through the profiling workflow and I look forward to enterprising strangers on the internet pointing out places where things can get faster still.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<script src=\"../../site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"../../site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"../../site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"../../site_libs/highlight-6.2.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/highlight-6.2.0/highlight.js\"></script>\n<script src=\"../../site_libs/profvis-binding-0.3.7.9000/profvis.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}