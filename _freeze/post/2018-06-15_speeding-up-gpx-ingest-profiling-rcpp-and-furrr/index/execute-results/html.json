{
  "hash": "d53f5ed2fef6b07ee7bc15d5598df029",
  "result": {
    "markdown": "---\ntitle: \"speeding up GPX ingest: profiling, Rcpp and furrr\"\nsubtitle: |\n  a demonstration of how to profile r code on a toy problem\ndate: \"2018-06-15\"\ncategories: [code performance, rstats]\n---\n\nThis post is a casual case study in speeding up R code. I work through several iterations of a function to read and process GPS running data from Strava stored in the GPX format. Along the way I describe how to visualize code bottlenecks with `profvis` and briefly touch on fast compiled code with `Rcpp` and parallelization with `furrr`.\n\n## The problem: tidying trajectories in GPX files\n\nI record my runs on my phone using Strava. Strava stores the GPS recordings in GPX files, which are XML files that follow some additional conventions. They start with some metadata and then contain a list of GPS readings taken at one second intervals with longitude, latitude, elevation and timestap information. I wanted to approximate my speed at each timestamp in the GPS record, as well as my distance traveled since the previous GPS recordings. \n\nBelow I have an example of a GPX file that contains three GPS readings. First I create a vector that contains the names off my GPX files, and then I subset to the files that contain running data. I choose to work with the third run as a canonical example, and show a subset of the recording with three GPS readings.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(here)\n\n# file contain run data\nact_files <- dir(here::here(\"post\", \"2018-06-15_speeding-up-gpx-ingest-profiling-rcpp-and-furrr\", \"2018-04-17-activities-alex\"),\n  full.names = TRUE\n)\nrun_files <- act_files[str_detect(act_files, \"Run\")]\n\n# example file we'll work with\nfname <- run_files[3]\n\n# subset of example\nall <- read_lines(fname)\nmini_idx <- c(1:20, 5897:5899)\ncat(all[mini_idx], sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gpx creator=\"StravaGPX Android\" version=\"1.1\" xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\">\n <metadata>\n  <time>2017-10-31T17:58:22Z</time>\n </metadata>\n <trk>\n  <name>analytically slow</name>\n  <trkseg>\n   <trkpt lat=\"29.7169490\" lon=\"-95.3978210\">\n    <ele>14.1</ele>\n    <time>2017-10-31T17:58:22Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7168040\" lon=\"-95.3977180\">\n    <ele>14.4</ele>\n    <time>2017-10-31T17:58:29Z</time>\n   </trkpt>\n   <trkpt lat=\"29.7167480\" lon=\"-95.3976890\">\n    <ele>14.5</ele>\n    <time>2017-10-31T17:58:30Z</time>\n   </trkpt>\n  </trkseg>\n </trk>\n</gpx>\n```\n:::\n:::\n\nThe part we want is in the `<trkseg>` tags. We'd like to turn this into a tidy dataframe where each row represents one GPS reading and the columns contain information like speed, distance, traveled, elevation gained, etc.\n\n## GPX reader version 0: using plotKML::readGPX \n\n:::{.callout-note}\n`plotKML` was archived from CRAN on 2022-04-18 and the archived version isn't easy to install. I've pulled the source for the `readGPX()` function and inserted it below to avoid depending on the `plotKML` package as of 2022-04-29.\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(XML)\n\nreadGPX <- function(gpx.file,\n                    metadata = TRUE,\n                    bounds = TRUE,\n                    waypoints = TRUE,\n                    tracks = TRUE,\n                    routes = TRUE) {\n  opt <- options(warn = -1)\n  if (!file.exists(gpx.file)) stop(\"The file '\", gpx.file, \"'\\n  does not exist in \", getwd())\n\n  if (metadata == TRUE) {\n    metadata <- .readGPX.element(gpx.file, \"name\")\n  }\n  if (bounds == TRUE) {\n    bounds <- .readGPX.element(gpx.file, \"bounds\")\n  }\n  if (waypoints == TRUE) {\n    waypoints <- .readGPX.element(gpx.file, \"wpt\")\n  }\n  if (tracks == TRUE) {\n    tracks <- .readGPX.element(gpx.file, \"trk\")\n  }\n  if (routes == TRUE) {\n    routes <- .readGPX.element(gpx.file, \"rte\")\n  }\n\n  gpx <- list(metadata = metadata, bounds = bounds, waypoints = waypoints, tracks = tracks, routes = routes)\n  return(gpx)\n  on.exit(options(opt))\n}\n\n## Read various elements from a *.gpx file:\n\n.readGPX.element <- function(gpx.file, element) {\n  # element = \"metadata\", \"wpt\", \"rte\", \"trk\"\n\n  ret <- xmlTreeParse(gpx.file, useInternalNodes = TRUE)\n  # top structure:\n  top <- xmlRoot(ret)\n\n  # check if there is any content:\n  if (any(grep(element, names(top)))) {\n\n    # tracks:\n    if (element == \"trk\") {\n      ret <- NULL\n      nu <- which(names(top) %in% element)\n      for (c in seq_along(nu)) {\n        lst <- which(names(top[[nu[c]]]) %in% \"trkseg\")\n        nm <- names(top[[nu[c]]][[lst[1]]][[1]])\n        ret[[c]] <- list(NULL)\n        for (i in seq_along(lst)) {\n          trkpt <- top[[nu[c]]][[lst[i]]]\n          ret[[c]][[i]] <- data.frame(NULL)\n          ## get columns (https://www.topografix.com/GPX/1/1/#type_wptType)\n          lon <- as.numeric(xmlSApply(trkpt, xmlGetAttr, \"lon\"))\n          lat <- as.numeric(xmlSApply(trkpt, xmlGetAttr, \"lat\"))\n          ret[[c]][[i]][1:length(lon), \"lon\"] <- lon\n          ret[[c]][[i]][1:length(lat), \"lat\"] <- lat\n          if (!nm[[1]] == \"NULL\") {\n            for (j in 1:length(nm)) {\n              xm <- as.character(sapply(sapply(xmlChildren(trkpt), function(x) x[[nm[[j]]]]), xmlValue))\n              ret[[c]][[i]][1:length(xm), nm[[j]]] <- xm\n            }\n          }\n        }\n        names(ret[[c]]) <- xmlValue(top[[nu[c]]][[\"name\"]])\n      }\n    }\n\n    if (element == \"wpt\") {\n      ret <- data.frame(NULL)\n      nu <- which(names(top) %in% element)\n      nm <- names(top[[nu[1]]])\n      for (i in seq_along(nu)) {\n        # coordinates:\n        ret[i, \"lon\"] <- as.numeric(xmlGetAttr(top[[nu[i]]], \"lon\"))\n        ret[i, \"lat\"] <- as.numeric(xmlGetAttr(top[[nu[i]]], \"lat\"))\n        if (!nm[[1]] == \"NULL\") {\n          for (j in 1:length(nm)) {\n            ret[i, nm[[j]]] <- xmlValue(xmlChildren(top[[nu[i]]])[[nm[[j]]]])\n          }\n        }\n      }\n    }\n\n    if (element == \"rte\") {\n      ret <- NULL\n      nu <- which(names(top) %in% element)\n      for (c in seq_along(nu)) {\n        ret[[c]] <- data.frame(NULL)\n        lst <- which(names(top[[nu[c]]]) %in% \"rtept\")\n        nm <- names(top[[nu[c]]][[lst[1]]])\n        for (i in seq_along(lst)) {\n          rtept <- top[[nu[c]]][[lst[i]]]\n          ret[[c]][i, \"lon\"] <- as.numeric(xmlGetAttr(rtept, \"lon\"))\n          ret[[c]][i, \"lat\"] <- as.numeric(xmlGetAttr(rtept, \"lat\"))\n          if (!nm[[1]] == \"NULL\") {\n            for (j in c(\"name\", \"cmt\", \"desc\", \"sym\", \"type\")) {\n              try(ret[[c]][i, j] <- xmlValue(rtept[[j]]), silent = TRUE)\n            }\n          }\n        }\n        names(ret)[c] <- xmlValue(top[[nu[c]]][[\"name\"]])\n      }\n    }\n\n    # bounds\n    if (element == \"bounds\") {\n      nu <- which(names(top) %in% element)\n      ret <- matrix(rep(NA, 4), nrow = 2, dimnames = list(c(\"lat\", \"lon\"), c(\"min\", \"max\")))\n      # coordinates:\n      ret[1, 1] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"minlon\"))\n      ret[1, 2] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"maxlon\"))\n      ret[2, 1] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"minlat\"))\n      ret[2, 2] <- as.numeric(xmlGetAttr(top[[nu[1]]], \"maxlat\"))\n    }\n\n    # metadata\n    if (element == \"name\") {\n      lst <- c(\"name\", \"desc\", \"author\", \"email\", \"url\", \"urlname\", \"time\")\n      nu <- which(names(top) %in% lst)\n      if (!nu[[1]] == \"NULL\") {\n        ret <- data.frame(NULL)\n        for (i in seq_along(lst)) {\n          try(ret[1, lst[i]] <- xmlValue(top[[nu[[i]]]]), silent = TRUE)\n        }\n      }\n    }\n  } else {\n    ret <- NULL\n  }\n\n  return(ret)\n}\n```\n:::\n\nUsing `plotKML::readGPX` we can read the representative file into R.\n\n::: {.cell}\n\n```{.r .cell-code}\ngps_raw <- readGPX(fname)$tracks[[1]][[1]]  |> \n  as_tibble()\n\ngps_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n     lon   lat ele   time                \n   <dbl> <dbl> <chr> <chr>               \n 1 -95.4  29.7 14.1  2017-10-31T17:58:22Z\n 2 -95.4  29.7 14.4  2017-10-31T17:58:29Z\n 3 -95.4  29.7 14.5  2017-10-31T17:58:30Z\n 4 -95.4  29.7 14.6  2017-10-31T17:58:31Z\n 5 -95.4  29.7 14.6  2017-10-31T17:58:32Z\n 6 -95.4  29.7 14.7  2017-10-31T17:58:33Z\n 7 -95.4  29.7 14.7  2017-10-31T17:58:34Z\n 8 -95.4  29.7 14.7  2017-10-31T17:58:36Z\n 9 -95.4  29.7 14.7  2017-10-31T17:58:37Z\n10 -95.4  29.7 14.7  2017-10-31T17:58:38Z\n# … with 1,462 more rows\n```\n:::\n:::\n\nNow we can we correct the type information:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\nretyped <- gps_raw |>\n  mutate_at(vars(lon, lat, ele), as.numeric) |>\n  mutate_at(vars(time), lubridate::ymd_hms)\n\nretyped\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n     lon   lat   ele time               \n   <dbl> <dbl> <dbl> <dttm>             \n 1 -95.4  29.7  14.1 2017-10-31 17:58:22\n 2 -95.4  29.7  14.4 2017-10-31 17:58:29\n 3 -95.4  29.7  14.5 2017-10-31 17:58:30\n 4 -95.4  29.7  14.6 2017-10-31 17:58:31\n 5 -95.4  29.7  14.6 2017-10-31 17:58:32\n 6 -95.4  29.7  14.7 2017-10-31 17:58:33\n 7 -95.4  29.7  14.7 2017-10-31 17:58:34\n 8 -95.4  29.7  14.7 2017-10-31 17:58:36\n 9 -95.4  29.7  14.7 2017-10-31 17:58:37\n10 -95.4  29.7  14.7 2017-10-31 17:58:38\n# … with 1,462 more rows\n```\n:::\n:::\n\nWe want to compare location at $t$ and $t - 1$, so we create a lagged column of longitudes and latitudes. We put longitude and latitude together into a vector to play well with `raster::pointDistance`, which we'll use to compute the great circle distance between two points.\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nlagged <- retyped |>\n  mutate(\n    x = map2(lon, lat, c), # create lagged position, this means the\n    x_old = lag(x),        # first row isn't complete\n    t_old = lag(time)\n  ) |>\n  slice(-1) # remove incomplete first row\n\nlagged\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,471 × 7\n     lon   lat   ele time                x         x_old     t_old              \n   <dbl> <dbl> <dbl> <dttm>              <list>    <list>    <dttm>             \n 1 -95.4  29.7  14.4 2017-10-31 17:58:29 <dbl [2]> <dbl [2]> 2017-10-31 17:58:22\n 2 -95.4  29.7  14.5 2017-10-31 17:58:30 <dbl [2]> <dbl [2]> 2017-10-31 17:58:29\n 3 -95.4  29.7  14.6 2017-10-31 17:58:31 <dbl [2]> <dbl [2]> 2017-10-31 17:58:30\n 4 -95.4  29.7  14.6 2017-10-31 17:58:32 <dbl [2]> <dbl [2]> 2017-10-31 17:58:31\n 5 -95.4  29.7  14.7 2017-10-31 17:58:33 <dbl [2]> <dbl [2]> 2017-10-31 17:58:32\n 6 -95.4  29.7  14.7 2017-10-31 17:58:34 <dbl [2]> <dbl [2]> 2017-10-31 17:58:33\n 7 -95.4  29.7  14.7 2017-10-31 17:58:36 <dbl [2]> <dbl [2]> 2017-10-31 17:58:34\n 8 -95.4  29.7  14.7 2017-10-31 17:58:37 <dbl [2]> <dbl [2]> 2017-10-31 17:58:36\n 9 -95.4  29.7  14.7 2017-10-31 17:58:38 <dbl [2]> <dbl [2]> 2017-10-31 17:58:37\n10 -95.4  29.7  14.7 2017-10-31 17:58:39 <dbl [2]> <dbl [2]> 2017-10-31 17:58:38\n# … with 1,461 more rows\n```\n:::\n:::\n\nIt turns out this data is not contiguous. Strava has a feature called autopause which detects pauses in runs (for example, at a stoplight), and GPS readings during paused periods are not include in the GPX files[^1]. GPS readings typically happen once every second. I plotted the time gaps between readings and realized that time gaps greater than three seconds between two GPS recordings indicated a pause. This lets me break the run down into a series of contigous segments:\n\n[^1]: It took me a two months to realize this, mostly because I didn't plot enough of the data. If you're curous how Strava detects paused movement, you can read more [here](https://medium.com/strava-engineering/improving-auto-pause-for-everyone-13f253c66f9e). It seems to involve more if-statements than fun models.\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nsegmented <- lagged |>\n  mutate(\n    rest = as.numeric(time - t_old), # seconds\n    new_segment = as.numeric(rest > 3),\n    segment = cumsum(new_segment)\n  ) |>\n  # don't want t_old to be from previous segment\n  group_by(segment) |>\n  slice(-1)\n\nsegmented\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 10\n# Groups:   segment [5]\n     lon   lat   ele time                x      x_old  t_old                rest\n   <dbl> <dbl> <dbl> <dttm>              <list> <list> <dttm>              <dbl>\n 1 -95.4  29.7  14.5 2017-10-31 17:58:30 <dbl>  <dbl>  2017-10-31 17:58:29     1\n 2 -95.4  29.7  14.6 2017-10-31 17:58:31 <dbl>  <dbl>  2017-10-31 17:58:30     1\n 3 -95.4  29.7  14.6 2017-10-31 17:58:32 <dbl>  <dbl>  2017-10-31 17:58:31     1\n 4 -95.4  29.7  14.7 2017-10-31 17:58:33 <dbl>  <dbl>  2017-10-31 17:58:32     1\n 5 -95.4  29.7  14.7 2017-10-31 17:58:34 <dbl>  <dbl>  2017-10-31 17:58:33     1\n 6 -95.4  29.7  14.7 2017-10-31 17:58:36 <dbl>  <dbl>  2017-10-31 17:58:34     2\n 7 -95.4  29.7  14.7 2017-10-31 17:58:37 <dbl>  <dbl>  2017-10-31 17:58:36     1\n 8 -95.4  29.7  14.7 2017-10-31 17:58:38 <dbl>  <dbl>  2017-10-31 17:58:37     1\n 9 -95.4  29.7  14.7 2017-10-31 17:58:39 <dbl>  <dbl>  2017-10-31 17:58:38     1\n10 -95.4  29.7  14.6 2017-10-31 17:58:40 <dbl>  <dbl>  2017-10-31 17:58:39     1\n# … with 1,454 more rows, and 2 more variables: new_segment <dbl>,\n#   segment <dbl>\n```\n:::\n:::\n\nNow I calculate some information about each time point and segment that I'll use in downstream analyses:\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nlonlat_dist <- partial(raster::pointDistance, lonlat = TRUE)\n\nuseful <- segmented |>\n  mutate(\n    seg_length = max(time) - min(t_old),  # seconds\n    dx = map2_dbl(x, x_old, lonlat_dist), # meters\n    dx = 0.000621371 * dx,                # miles\n    dt = rest / 60^2,                     # hours\n    speed = dx / dt,                      # mph\n    pace = 60 * dt / dx,                  # min / mile\n    elev = as.numeric(ele)                # feet\n  ) |> \n  dplyr::select(-ele, -x, -x_old, -t_old, -new_segment, -rest) |>\n  ungroup()\n\nuseful\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,464 × 10\n     lon   lat time                seg…¹ seg…²      dx      dt speed  pace  elev\n   <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl> <dbl>\n 1 -95.4  29.7 2017-10-31 17:58:30     1 510 … 0.00423 2.78e-4 15.2   3.94  14.5\n 2 -95.4  29.7 2017-10-31 17:58:31     1 510 … 0.00367 2.78e-4 13.2   4.54  14.6\n 3 -95.4  29.7 2017-10-31 17:58:32     1 510 … 0.00197 2.78e-4  7.11  8.44  14.6\n 4 -95.4  29.7 2017-10-31 17:58:33     1 510 … 0.00483 2.78e-4 17.4   3.45  14.7\n 5 -95.4  29.7 2017-10-31 17:58:34     1 510 … 0.00230 2.78e-4  8.28  7.25  14.7\n 6 -95.4  29.7 2017-10-31 17:58:36     1 510 … 0.00410 5.56e-4  7.38  8.13  14.7\n 7 -95.4  29.7 2017-10-31 17:58:37     1 510 … 0.00243 2.78e-4  8.75  6.86  14.7\n 8 -95.4  29.7 2017-10-31 17:58:38     1 510 … 0.00316 2.78e-4 11.4   5.27  14.7\n 9 -95.4  29.7 2017-10-31 17:58:39     1 510 … 0.00415 2.78e-4 15.0   4.01  14.7\n10 -95.4  29.7 2017-10-31 17:58:40     1 510 … 0.00363 2.78e-4 13.1   4.60  14.6\n# … with 1,454 more rows, and abbreviated variable names ¹​segment, ²​seg_length\n```\n:::\n:::\n\nWe can quickly visualize instantaneous speed throughout the run:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(useful, aes(time, speed, group = segment)) +\n  geom_point() +\n  geom_line(alpha = 0.5) +\n  labs(\n    title = \"Speed throughout example run\",\n    y = \"Speed (mph)\"\n  ) +\n  theme_classic() +\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\nWe can see two short pauses present in the run at around 18:08 and 18:17.\n\nWe're going to use the code above a whole bunch, so we wrap it up into a helper function. I'm not sure that `raster::pointDistance` is the best option for calculating the distance between two points, so we use a `dist_func` argument to make it easy to switch out.\n\n::: {.cell}\n\n```{.r .cell-code}\nget_metrics <- function(gps_df, dist_func = lonlat_dist) {\n  gps_df |>\n    mutate_at(vars(lon, lat, ele), as.numeric) |>\n    mutate_at(vars(time), lubridate::ymd_hms) |>\n    mutate(\n      x = map2(lon, lat, c),\n      x_old = lag(x),\n      t_old = lag(time)\n    ) |>\n    slice(-1) |>\n    mutate(\n      rest = as.numeric(time - t_old),\n      new_segment = as.numeric(rest > 3),\n      segment = cumsum(new_segment) + 1\n    ) |>\n    group_by(segment) |>\n    slice(-1) |>\n    mutate(\n      seg_length = max(time) - min(t_old),\n      dx = map2_dbl(x, x_old, dist_func),\n      dx = 0.000621371 * dx,\n      dt = rest / 60^2,\n      speed = dx / dt,\n      pace = 60 * dt / dx,\n      elev = as.numeric(ele)\n    ) |>\n    dplyr::select(-ele, -x, -x_old, -t_old, -new_segment, -rest) |>\n    ungroup()\n}\n```\n:::\n\nThis means our initial `read_gpx` function is just two lines:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx0 <- function(fname) {\n  gps_df <- readGPX(fname)$tracks[[1]][[1]]\n  get_metrics(gps_df)\n}\n```\n:::\n\nWe can use `profvis::profvis` to create an interactive visualization of how long it takes to read the example file.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(profvis)\n\nprofvis(read_gpx0(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-606274c34625b7bee77e\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-606274c34625b7bee77e\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,4,4,4,4,4,4,4,4,5,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,21,21,21,21,22,24,24,24],\"depth\":[8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,8,7,6,5,4,3,2,1,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,1,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,1,4,3,2,1,1,3,2,1],\"label\":[\"grep\",\"FUN\",\"lapply\",\"sapply\",\"xmlSApply.XMLInternalNode\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"xmlAttrs\",\"FUN\",\"lapply\",\"sapply\",\"xmlSApply.XMLInternalNode\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\".Call\",\"xmlAttrs.XMLInternalNode\",\"FUN\",\"lapply\",\"sapply\",\"xmlSApply.XMLInternalNode\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"class\",\"[[\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"getClassDef\",\"is\",\"[[.XMLInternalElementNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"lengths\",\"lengths\",\"simplify2array\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"getClassDef\",\"is\",\"[[.XMLInternalNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\"[[.XMLInternalNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\".identC\",\"is\",\"[[.XMLInternalNode\",\"FUN\",\"lapply\",\"sapply\",\".readGPX.element\",\"readGPX\",\"read_gpx0\",\".Call\",\"$\",\"cmpSym\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallExprFun\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpCallArgs\",\"cmpCallSymFun\",\"cmpCall\",\"cmp\",\"h\",\"tryInline\",\"cmpCall\",\"cmp\",\"genCode\",\"cmpfun\",\"compiler:::tryCmpfun\",\"structure\",\".encode_numeric_version\",\"Ops.numeric_version\",\".rlang_cli_compat\",\".rlang_cli_format_fallback\",\"signal\",\"lifecycle::signal_stage\",\"mutate_at\",\"get_metrics\",\"read_gpx0\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"is_string\",\"sym\",\"...elt2\",\"impl\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"stopifnot\",\".fn\",\".f\",\"map2_dbl\",\"standardGeneric\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"standardGeneric\",\".fn\",\".f\",\"map2_dbl\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[34.1341781616211,34.1341781616211,34.1341781616211,34.1341781616211,34.1341781616211,34.1341781616211,34.1341781616211,34.1341781616211,34.2697067260742,34.2697067260742,34.2697067260742,34.2697067260742,34.2697067260742,34.2697067260742,34.2697067260742,34.2697067260742,34.4991683959961,34.9021759033203,34.9021759033203,34.9021759033203,34.9021759033203,34.9021759033203,34.9021759033203,34.9021759033203,34.9021759033203,35.5229187011719,35.6087036132812,35.6087036132812,35.6087036132812,35.6087036132812,35.6087036132812,35.6087036132812,35.6087036132812,35.746955871582,35.746955871582,35.746955871582,35.746955871582,35.746955871582,35.746955871582,35.746955871582,35.746955871582,35.746955871582,35.8367156982422,35.8367156982422,35.8367156982422,35.8367156982422,35.8367156982422,35.8367156982422,35.8367156982422,36.2875213623047,36.2875213623047,36.2875213623047,36.2875213623047,36.2875213623047,36.2875213623047,36.7094802856445,36.7094802856445,36.7094802856445,36.7094802856445,36.7094802856445,36.7094802856445,36.7094802856445,36.7094802856445,36.7094802856445,36.8532180786133,36.8532180786133,36.8532180786133,36.8532180786133,36.8532180786133,36.8532180786133,36.8532180786133,36.9493865966797,36.9493865966797,36.9493865966797,36.9493865966797,36.9493865966797,36.9493865966797,36.9493865966797,36.9493865966797,36.9493865966797,37.3574905395508,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.6372222900391,37.9383163452148,37.9383163452148,37.9383163452148,37.9383163452148,37.9383163452148,37.9383163452148,37.9383163452148,37.9383163452148,37.9383163452148,37.9383163452148,39.394889831543,39.394889831543,39.394889831543,39.394889831543,39.394889831543,39.394889831543,39.394889831543,39.394889831543,39.394889831543,39.394889831543,41.4325637817383,41.4325637817383,41.4325637817383,41.4325637817383,42.5101013183594,42.5101013183594,42.5101013183594,42.5101013183594,43.9006042480469,43.9006042480469,43.9006042480469,43.9006042480469,44.8037796020508,46.0265960693359,46.0265960693359,46.0265960693359,46.0265960693359,46.7947235107422,34.8403472900391,34.8403472900391,34.8403472900391],\"meminc\":[0,0,0,0,0,0,0,0,0.135528564453125,0,0,0,0,0,0,0,0.229461669921875,0.403007507324219,0,0,0,0,0,0,0,0.620742797851562,0,0,0,0,0,0,0,0.138252258300781,0,0,0,0,0,0,0,0,0.0897598266601562,0,0,0,0,0,0,0.4508056640625,0,0,0,0,0,0.421958923339844,0,0,0,0,0,0,0,0,0.14373779296875,0,0,0,0,0,0,0.0961685180664062,0,0,0,0,0,0,0,0,0.408103942871094,0.279731750488281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.301094055175781,0,0,0,0,0,0,0,0,0,1.45657348632812,0,0,0,0,0,0,0,0,0,2.03767395019531,0,0,0,1.07753753662109,0,0,0,1.3905029296875,0,0,0,0.903175354003906,1.22281646728516,0,0,0,0.76812744140625,-11.9543762207031,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpTCTmwI/fileb1bc140155d5.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nIn the default view, the horizontal axis represents time and the box represents the call stack. All the boxes above `plotKML::readGPX` are functions called by `plotKML::readGPX`. Here it seems like `plotKML::readGPX` takes about 400 milliseconds to run. So about half the time is spent reading in the file, and half calculating metrics. Most of the time calculating metrics is in `raster::pointDistance`, which is fairly up the call stack - you may have to click and drag the plot to see it.\n\n## GPX reader version 1: no more plotKML::GPX\n\nThen I broke my R library and couldn't use `plotKML::readGPX` for a little while. Since GPX files are XML files, I used the `xml2` package as a replacement. `xml2` has a function `as_list` that let me treat the XML as an R list. We extract the relevant portion of the list and `purrr::map_dfr` each GPS recording into a row of a `tibble`.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(xml2)\n\nrun_xml <- read_xml(fname)\nrun_list <- as_list(run_xml)\ngps_pts <- run_list$gpx$trk$trkseg\n\nextract_gps_point <- function(point) {\n  tibble(\n    lon = attr(point, \"lon\"),\n    lat = attr(point, \"lat\"),\n    ele = point$ele[[1]],\n    time = point$time[[1]]\n  )\n}\n\nmap_dfr(gps_pts, extract_gps_point)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,472 × 4\n   lon         lat        ele   time                \n   <chr>       <chr>      <chr> <chr>               \n 1 -95.3978210 29.7169490 14.1  2017-10-31T17:58:22Z\n 2 -95.3977180 29.7168040 14.4  2017-10-31T17:58:29Z\n 3 -95.3976890 29.7167480 14.5  2017-10-31T17:58:30Z\n 4 -95.3976530 29.7167050 14.6  2017-10-31T17:58:31Z\n 5 -95.3976600 29.7166770 14.6  2017-10-31T17:58:32Z\n 6 -95.3976330 29.7166110 14.7  2017-10-31T17:58:33Z\n 7 -95.3976090 29.7165850 14.7  2017-10-31T17:58:34Z\n 8 -95.3975830 29.7165300 14.7  2017-10-31T17:58:36Z\n 9 -95.3975780 29.7164950 14.7  2017-10-31T17:58:37Z\n10 -95.3975630 29.7164510 14.7  2017-10-31T17:58:38Z\n# … with 1,462 more rows\n```\n:::\n:::\n\nThen we wrap this in a function.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx1 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n\n  extract_gps_point <- function(point) {\n    tibble(\n      lon = attr(point, \"lon\"),\n      lat = attr(point, \"lat\"),\n      ele = point$ele[[1]],\n      time = point$time[[1]]\n    )\n  }\n\n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n```\n:::\n\nThe next part is critical when trying to speed up code: **test that the new code does the same thing as the old code**.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(testthat)\n\nexpected <- read_gpx0(fname)\nresult_1 <- read_gpx1(fname)\n\n# silence means everything went well\nexpect_equal(expected, result_1)\n```\n:::\n\nThis turned out to be too slow, so we profile and see which lines are taking the most amount of time.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx1(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-ac621606e59d4d717ba8\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ac621606e59d4d717ba8\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,59,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,71,71,71,71,71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,76,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,87,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,102,102,103,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,106,106,107,107,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,109,109,110,110,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,122,123,123,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,126,126,126,126,127,127,128,129,130,130,130,130,130],\"depth\":[11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,1,13,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,1,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,1,2,1,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,2,1,1,1,5,4,3,2,1],\"label\":[\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"xml_name.xml_node\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_text\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_type.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as.list\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"isTRUE\",\"xml_text.xml_node\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"any\",\"match.fun\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"$\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx1\",\"vec_is_vector\",\"vec_is\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"c\",\".External2\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"match.fun\",\"vapply\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as.list\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"has_length\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"withCallingHandlers\",\"subclass_name_repair_errors\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"logical\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<GC>\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"which\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vec_size\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"parent.frame\",\"eval\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".Call\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"%in%\",\"expr_type_of\",\"switch_expr\",\"quo_squash_impl\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"names2\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"add_to_env\",\"add_to_env2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map2\",\"imap\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".Call\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".transformer\",\"<Anonymous>\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"has_length\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"is_character\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grep\",\"detect_dot_dot\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval_tidy\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"integer\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"which\",\"detect_empty_names\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"paste0\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"paste0\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".External2\",\"alist\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"environment\",\"quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"as_glue\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"add_to_env\",\"add_to_env2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"isTRUE\",\"which\",\"detect_empty_names\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"environment\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"lengths\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"which\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"recycle_columns\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"eval\",\".transformer\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"add_to_env\",\"add_to_env2\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"length\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"vapply\",\"drop_null\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"<Anonymous>\",\"switch_expr\",\"quo_squash_impl\",\"quo_squash\",\"as_label\",\"caller_arg\",\"arg_match0\",\"exprs_auto_name\",\"quos_auto_name\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"replace\",\"FUN\",\"lapply\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"tryCatch\",\"<Anonymous>\",\"<GC>\",\"vec_is\",\"FUN\",\"vapply\",\"map_mold\",\"map_lgl\",\"check_valid_cols\",\"check_valid_col\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"anyDuplicated\",\"validate_unique\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"doTryCatch\",\"tryCatchOne\",\"tryCatchList\",\"tryCatch\",\"<Anonymous>\",\"new_tibble\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"length\",\"rep_along\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"paste0\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"grepl\",\"has_newline\",\"trim\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"<Anonymous>\",\"glue_data\",\"glue::glue\",\".name_spec\",\"<Anonymous>\",\"vec_c\",\"splice_dfs\",\"tibble_quos\",\"tibble\",\".f\",\"map\",\"map_dfr\",\"read_gpx1\",\"flatten_if\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx1\",\".External2\",\"unstructure\",\"rlang_as_list\",\"regexpr\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"expr\",\"context_local\",\"local_mask\",\"initialize\",\"DataMask$new\",\"mutate_cols\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx1\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\".f\",\"map2_dbl\",\"standardGeneric\",\"standardGeneric\",\"vec_unchop\",\"mutate_cols\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx1\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,35.8487319946289,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.0224914550781,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.2871704101562,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.4625625610352,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.7259674072266,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,36.9005508422852,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.1584243774414,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.3285140991211,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.5817337036133,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,37.7474517822266,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.0000839233398,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.166130065918,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.4203948974609,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.5904922485352,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,38.8457641601562,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.0163726806641,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.2700653076172,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.4379806518555,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,39.6877288818359,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.4150695800781,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.6709899902344,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,35.8392868041992,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.1031951904297,36.2791061401367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.5359420776367,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.7033004760742,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,36.9525375366211,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.1151733398438,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.3576126098633,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.5501403808594,37.739372253418,37.8698883056641,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.0673980712891,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.1992950439453,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.4003677368164,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.5340423583984,38.7349319458008,38.7349319458008,38.7349319458008,38.7349319458008,38.7349319458008,38.7349319458008,38.7349319458008,38.7349319458008,38.7349319458008,38.7349319458008,38.8690872192383,38.8690872192383,38.8690872192383,38.8690872192383,38.8690872192383,38.8690872192383,39.0693969726562,39.0693969726562,39.0693969726562,39.0693969726562,39.0693969726562,39.0693969726562,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.2040863037109,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,39.3786010742188,35.5725708007812,35.5725708007812,35.5725708007812,35.5725708007812,35.5725708007812,35.5725708007812,35.5725708007812,35.5725708007812,35.7771148681641,35.7771148681641,35.7771148681641,35.7771148681641,35.7771148681641,35.7771148681641,35.7771148681641,35.7771148681641,35.7771148681641,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,35.9128952026367,36.1193237304688,36.1193237304688,36.1193237304688,36.1193237304688,36.1193237304688,36.1193237304688,36.1193237304688,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.2554092407227,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.4565963745117,36.58349609375,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,36.8990325927734,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.0937271118164,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.2217330932617,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.410774230957,37.5385894775391,37.5385894775391,37.5385894775391,37.5385894775391,37.5385894775391,37.5385894775391,37.5385894775391,37.5385894775391,37.5385894775391,37.7301406860352,37.7301406860352,37.7301406860352,37.7301406860352,37.7301406860352,37.7301406860352,37.7301406860352,37.7301406860352,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,37.8574600219727,38.0538864135742,38.0538864135742,38.0538864135742,38.0538864135742,38.0538864135742,38.0538864135742,38.0538864135742,38.0538864135742,38.0538864135742,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.1857376098633,38.3861541748047,38.5157165527344,38.5157165527344,38.5157165527344,38.5157165527344,38.5157165527344,38.5157165527344,38.5157165527344,38.5157165527344,38.5157165527344,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.7096252441406,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,38.8330612182617,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.0222091674805,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,39.1536026000977,35.5888671875,35.5888671875,35.5888671875,35.5888671875,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.7245483398438,35.9273147583008,35.9273147583008,36.0651245117188,36.0651245117188,36.0651245117188,36.0651245117188,36.0651245117188,36.0651245117188,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.2717742919922,36.4097137451172,36.4097137451172,36.4097137451172,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.6146011352539,36.7492523193359,36.7492523193359,36.7492523193359,36.7492523193359,36.7492523193359,36.7492523193359,36.7492523193359,36.7492523193359,36.7492523193359,36.9476318359375,36.9476318359375,36.9476318359375,36.9476318359375,36.9476318359375,36.9476318359375,36.9476318359375,36.9476318359375,36.9476318359375,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.0787887573242,37.2733306884766,37.2733306884766,37.2733306884766,37.2733306884766,37.2733306884766,37.2733306884766,37.2733306884766,37.4015426635742,37.5980682373047,37.5980682373047,37.5980682373047,37.5980682373047,37.5980682373047,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.7287368774414,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,37.9246368408203,38.0557861328125,38.0557861328125,38.0557861328125,38.0557861328125,38.0557861328125,38.0557861328125,38.0557861328125,38.2520294189453,38.2520294189453,38.2520294189453,38.2520294189453,38.2520294189453,38.2520294189453,38.2520294189453,38.2520294189453,38.2520294189453,38.2520294189453,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.3848190307617,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.5848541259766,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.7178497314453,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,38.918083190918,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.0513916015625,39.2490386962891,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.6161117553711,35.8208847045898,35.8208847045898,35.8208847045898,35.8208847045898,35.8208847045898,35.8208847045898,35.8208847045898,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,35.9573135375977,36.165641784668,36.165641784668,36.165641784668,36.165641784668,36.165641784668,36.165641784668,36.165641784668,36.165641784668,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.3036727905273,36.5108184814453,36.5108184814453,36.5108184814453,36.5108184814453,36.5108184814453,36.5108184814453,36.6473999023438,36.6473999023438,36.6473999023438,36.6473999023438,36.6473999023438,36.6473999023438,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.853385925293,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,36.9870147705078,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.1891860961914,37.3197402954102,37.3197402954102,37.3197402954102,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.5203323364258,37.656120300293,37.656120300293,37.656120300293,37.656120300293,37.656120300293,37.656120300293,37.656120300293,37.656120300293,37.8578796386719,37.8578796386719,37.8578796386719,37.8578796386719,37.8578796386719,37.8578796386719,37.8578796386719,37.8578796386719,37.8578796386719,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,37.9926147460938,38.1957855224609,38.3312759399414,38.3312759399414,38.3312759399414,38.3312759399414,38.3312759399414,38.3312759399414,38.3312759399414,38.3312759399414,38.3312759399414,38.3312759399414,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.5351791381836,38.6697692871094,38.6697692871094,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,38.8727798461914,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.0086288452148,39.2108917236328,39.2108917236328,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,39.2877044677734,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.7933807373047,35.9298858642578,35.9298858642578,35.9298858642578,35.9298858642578,35.9298858642578,36.1358489990234,36.1358489990234,36.1358489990234,36.1358489990234,36.1358489990234,36.1358489990234,36.1358489990234,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.2735137939453,36.4793701171875,36.4793701171875,36.4793701171875,36.4793701171875,36.4793701171875,36.4793701171875,36.4793701171875,36.4793701171875,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.6167221069336,36.8210678100586,36.8210678100586,36.8210678100586,36.8210678100586,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,36.9569473266602,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.1583709716797,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.2909469604492,37.4656372070312,37.4656372070312,37.4656372070312,37.4656372070312,38.222053527832,39.0223846435547,39.0223846435547,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,41.3715286254883,42.6903457641602,42.6903457641602,42.6903457641602,42.6903457641602,42.6903457641602,42.6903457641602,42.6903457641602,42.6903457641602,42.6903457641602,43.6123275756836,43.6123275756836,43.6123275756836,43.6123275756836,44.9738464355469,44.9738464355469,45.9097137451172,47.3275451660156,48.3113250732422,48.3113250732422,48.3113250732422,48.3113250732422,48.3113250732422],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0.173759460449219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.264678955078125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.175392150878906,0,0,0,0,0,0,0,0,0,0,0.263404846191406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174583435058594,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.25787353515625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.170089721679688,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.253219604492188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.165718078613281,0,0,0,0,0,0,0,0,0,0,0,0.252632141113281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.166046142578125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.254264831542969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.170097351074219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.255271911621094,0,0,0,0,0,0,0,0,0,0,0,0.170608520507812,0,0,0,0,0,0,0,0,0,0,0,0.253692626953125,0,0,0,0,0,0,0,0,0,0,0,0,0,0.167915344238281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.249748229980469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.27265930175781,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.25592041015625,0,0,0,0,0,0,0,0,0,0,0,0,0,0.168296813964844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.263908386230469,0,0,0,0,0,0,0,0,0,0,0,0.175910949707031,0.2568359375,0,0,0,0,0,0,0,0,0,0,0,0,0.1673583984375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.249237060546875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.162635803222656,0,0,0,0,0,0,0,0,0,0,0,0,0,0.242439270019531,0,0,0,0,0,0,0,0,0,0,0,0.192527770996094,0,0,0,0,0,0,0,0,0,0,0,0,0,0.189231872558594,0.130516052246094,0.197509765625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13189697265625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201072692871094,0,0,0,0,0,0,0,0,0,0,0,0,0,0.133674621582031,0,0,0,0,0,0,0,0,0,0,0,0.200889587402344,0,0,0,0,0,0,0,0,0,0.1341552734375,0,0,0,0,0,0.200309753417969,0,0,0,0,0,0.134689331054688,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174514770507812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.8060302734375,0,0,0,0,0,0,0,0.204544067382812,0,0,0,0,0,0,0,0,0.135780334472656,0,0,0,0,0,0,0,0,0,0,0,0.206428527832031,0,0,0,0,0,0,0.136085510253906,0,0,0,0,0,0,0,0,0,0,0,0,0.201187133789062,0,0,0,0,0,0,0,0,0,0,0,0,0,0.126899719238281,0.315536499023438,0,0,0,0,0,0,0,0,0,0,0,0.194694519042969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.128005981445312,0,0,0,0,0,0,0,0,0,0,0,0,0.189041137695312,0,0,0,0,0,0,0,0,0,0,0,0,0,0.127815246582031,0,0,0,0,0,0,0,0,0.191551208496094,0,0,0,0,0,0,0,0.1273193359375,0,0,0,0,0,0,0,0,0,0,0,0,0.196426391601562,0,0,0,0,0,0,0,0,0.131851196289062,0,0,0,0,0,0,0,0,0,0,0,0,0.200416564941406,0.129562377929688,0,0,0,0,0,0,0,0,0.19390869140625,0,0,0,0,0,0,0,0,0,0,0,0.123435974121094,0,0,0,0,0,0,0,0,0,0,0,0.18914794921875,0,0,0,0,0,0,0,0,0,0,0,0,0.131393432617188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13568115234375,0,0,0,0,0,0,0,0,0,0,0,0,0.202766418457031,0,0.137809753417969,0,0,0,0,0,0.206649780273438,0,0,0,0,0,0,0,0,0,0,0,0.137939453125,0,0,0.204887390136719,0,0,0,0,0,0,0,0,0,0,0,0,0.134651184082031,0,0,0,0,0,0,0,0,0.198379516601562,0,0,0,0,0,0,0,0,0.131156921386719,0,0,0,0,0,0,0,0,0,0,0,0,0.194541931152344,0,0,0,0,0,0,0.128211975097656,0.196525573730469,0,0,0,0,0.130668640136719,0,0,0,0,0,0,0,0,0,0,0,0,0,0.195899963378906,0,0,0,0,0,0,0,0,0,0,0,0,0.131149291992188,0,0,0,0,0,0,0.196243286132812,0,0,0,0,0,0,0,0,0,0.132789611816406,0,0,0,0,0,0,0,0,0,0,0,0.200035095214844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13299560546875,0,0,0,0,0,0,0,0,0,0,0,0,0.200233459472656,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.133308410644531,0,0,0,0,0,0,0,0,0,0,0,0,0.197647094726562,-3.63292694091797,0,0,0,0,0,0,0,0,0,0,0,0,0.20477294921875,0,0,0,0,0,0,0.136428833007812,0,0,0,0,0,0,0,0,0,0,0,0,0.208328247070312,0,0,0,0,0,0,0,0.138031005859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0.207145690917969,0,0,0,0,0,0.136581420898438,0,0,0,0,0,0.205986022949219,0,0,0,0,0,0,0,0,0,0,0,0,0.133628845214844,0,0,0,0,0,0,0,0,0,0,0,0,0.202171325683594,0,0,0,0,0,0,0,0,0,0,0,0,0,0.13055419921875,0,0,0.200592041015625,0,0,0,0,0,0,0,0,0,0,0,0.135787963867188,0,0,0,0,0,0,0,0.201759338378906,0,0,0,0,0,0,0,0,0.134735107421875,0,0,0,0,0,0,0,0,0,0,0,0,0,0.203170776367188,0.135490417480469,0,0,0,0,0,0,0,0,0,0.203903198242188,0,0,0,0,0,0,0,0,0,0,0,0,0,0.134590148925781,0,0.203010559082031,0,0,0,0,0,0,0,0,0,0,0,0,0,0.135848999023438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.202262878417969,0,0.076812744140625,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.49432373046875,0,0,0,0,0,0,0,0,0,0,0,0.136505126953125,0,0,0,0,0.205963134765625,0,0,0,0,0,0,0.137664794921875,0,0,0,0,0,0,0,0,0,0,0,0.205856323242188,0,0,0,0,0,0,0,0.137351989746094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.135879516601562,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.201423645019531,0,0,0,0,0,0,0,0,0,0,0,0.132575988769531,0,0,0,0,0,0,0,0,0,0,0,0,0.174690246582031,0,0,0,0.756416320800781,0.800331115722656,0,2.34914398193359,0,0,0,0,0,0,0,0,0,0,1.31881713867188,0,0,0,0,0,0,0,0,0.921981811523438,0,0,0,1.36151885986328,0,0.935867309570312,1.41783142089844,0.983779907226562,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpTCTmwI/fileb1bc71c75265.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nHere we see that we spend most of our time on the functions `as_list` and `tibble`.\n\n## GPX reader version 2: no more tibble\n\n`tibble`s are somewhat heavy objects, and we can bind lists together instead of `tibble`s, so let's try that next. We only change one line from `read_gpx1`.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx2 <- function(fname) {\n  run_xml <- read_xml(fname)\n  run_list <- as_list(run_xml)\n\n  extract_gps_point <- function(point) {\n    list(\n      lon = attr(point, \"lon\"),\n      lat = attr(point, \"lat\"),\n      ele = point$ele[[1]],\n      time = point$time[[1]]\n    )\n  }\n\n  gps_df <- map_dfr(run_list$gpx$trk$trkseg, extract_gps_point)\n  get_metrics(gps_df)\n}\n\nresult_2 <- read_gpx2(fname)\nexpect_equal(expected, result_2)\n```\n:::\n\nOur results are still as expected, which is good.  We profile again to see if we've done any better, which we have. Now we're at about 1.5 seconds instead of 2.5 seconds.\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx2(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-4392c26c754261ad0f52\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-4392c26c754261ad0f52\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,24,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,34,34,34,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,40,41,41,41,41,41,42,43,43,43,43,43,44,45,45,45,45,45],\"depth\":[17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,11,10,9,8,7,6,5,4,3,2,1,1,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,3,2,1,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1,7,6,5,4,3,2,1,1,5,4,3,2,1,1,5,4,3,2,1,1,5,4,3,2,1],\"label\":[\"fun\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"ifelse\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"structure\",\"FUN\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_text\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_to_r_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"fun\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"$\",\"FUN\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"<GC>\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_name\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"as_list\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"list\",\"c\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"isTRUE\",\"xml_nodeset\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"xml_attrs\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_type.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"lapply\",\"nodeset_apply.xml_node\",\"xml_contents\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"vapply\",\"xml_name.xml_nodeset\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"FUN\",\"lapply\",\"as_list.xml_node\",\"read_gpx2\",\"detect_void_name\",\"is_named\",\"<Anonymous>\",\"list2\",\"vctrs::data_frame\",\"FUN\",\"lapply\",\"map\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\"vctrs::data_frame\",\"FUN\",\"lapply\",\"map\",\"dplyr::bind_rows\",\"map_dfr\",\"read_gpx2\",\"propagate_names\",\"sel_operation\",\"sel_union\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::vars_select\",\"tbl_at_vars\",\"tbl_at_syms\",\"manip_at\",\"mutate_at\",\"get_metrics\",\"read_gpx2\",\"substr\",\".str_sub\",\".substitute_formats\",\"<Anonymous>\",\"mapply\",\".build_formats\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"frame_get\",\"frame_fn\",\"caller_fn\",\"arg_match\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx2\",\"standardGeneric\",\"cbind\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\"standardGeneric\",\"is.data.frame\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\".Call\",\"withCallingHandlers\",\"mutate_cols\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx2\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.1357040405273,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.3098907470703,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.5722503662109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,36.7460784912109,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.0059509277344,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.1786804199219,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.4331283569336,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.6024780273438,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,37.8502883911133,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.0097579956055,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.2453765869141,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.3923034667969,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.6282272338867,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.7813415527344,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,38.9769134521484,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.1110610961914,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.3276596069336,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.4521865844727,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.6766967773438,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.8087310791016,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,39.943359375,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.7219390869141,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,35.9245223999023,36.0374984741211,36.2483062744141,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.3824691772461,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.5653457641602,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.7229614257812,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,36.9288787841797,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.0747222900391,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.3042449951172,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.4662857055664,37.6821670532227,37.6821670532227,37.6821670532227,37.6821670532227,37.6821670532227,37.6821670532227,37.6821670532227,37.6821670532227,37.6821670532227,37.6821670532227,37.9632263183594,37.9632263183594,37.9632263183594,38.3877334594727,38.3877334594727,38.3877334594727,38.3877334594727,38.3877334594727,38.3877334594727,38.3877334594727,38.3877334594727,39.3048400878906,39.3048400878906,39.3048400878906,39.3048400878906,39.3048400878906,39.3048400878906,39.3048400878906,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,40.7315826416016,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,41.826301574707,44.0983428955078,44.0983428955078,44.0983428955078,44.0983428955078,44.0983428955078,44.0983428955078,44.0983428955078,44.8631973266602,46.2540588378906,46.2540588378906,46.2540588378906,46.2540588378906,46.2540588378906,47.1683044433594,48.5576171875,48.5576171875,48.5576171875,48.5576171875,48.5576171875,49.4652633666992,36.6792144775391,36.6792144775391,36.6792144775391,36.6792144775391,36.6792144775391],\"meminc\":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.174186706542969,0,0,0,0,0,0,0,0,0,0,0,0,0,0.262359619140625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.173828125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.259872436523438,0,0,0,0,0,0,0,0,0,0,0,0.1727294921875,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.254447937011719,0,0,0,0,0,0,0,0,0,0,0,0.169349670410156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.247810363769531,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.159469604492188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.235618591308594,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.146926879882812,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.235923767089844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.153114318847656,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.195571899414062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.134147644042969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.216598510742188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.124526977539062,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.224510192871094,0,0,0,0,0,0,0,0,0,0,0,0.132034301757812,0,0,0,0,0,0,0,0,0,0,0,0.134628295898438,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.22142028808594,0,0,0,0,0,0,0,0,0,0,0,0.202583312988281,0,0,0,0,0,0,0,0,0,0,0.11297607421875,0.210807800292969,0.134162902832031,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.182876586914062,0,0,0,0,0,0,0,0,0,0,0,0,0.157615661621094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.205917358398438,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.145843505859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.229522705078125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.162040710449219,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.21588134765625,0,0,0,0,0,0,0,0,0,0.281059265136719,0,0,0.424507141113281,0,0,0,0,0,0,0,0.917106628417969,0,0,0,0,0,0,1.42674255371094,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.09471893310547,0,0,0,0,0,0,0,0,0,0,0,2.27204132080078,0,0,0,0,0,0,0.764854431152344,1.39086151123047,0,0,0,0,0.91424560546875,1.38931274414062,0,0,0,0,0.907646179199219,-12.7860488891602,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpTCTmwI/fileb1bc18198625.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nI needed to this for about fifty files though, so this was still slow enough to be somewhat frustrating. Now `xml2::as_list` is really killing us. \n\n## GPX reader version 3: now with more xml2\n\nLuckily, we can use `xml2` to manipulate the XML via a fast C package instead. For this next part I tried functions exported by `xml2` until they worked and occasionally read the documentation.\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx_xml <- function(fname) {\n  # get the interested nodes\n  run_xml <- read_xml(fname)\n  trk <- xml_child(run_xml, 2)\n  trkseg <- xml_child(trk, 2)\n  trkpts <- xml_children(trkseg) # nodeset where each node is a GPS reading\n\n  # get the longitude and latitude for each node\n  latlon_list <- xml_attrs(trkpts)\n  latlon <- do.call(rbind, latlon_list)\n\n  # get the time and elevation for each node\n  ele_time_vec <- xml_text(xml_children(trkpts))\n  ele_time <- matrix(ele_time_vec, ncol = 2, byrow = TRUE)\n  colnames(ele_time) <- c(\"ele\", \"time\")\n\n  as_tibble(cbind(latlon, ele_time))\n}\n\nread_gpx3 <- function(fname) {\n  gps_df <- read_gpx_xml(fname) |> \n    select(lon, lat, everything())\n  get_metrics(gps_df)\n}\n\nresult_3 <- read_gpx3(fname)\nexpect_equal(expected, result_3) \n```\n:::\n\nAgain we see if there's anywhere else we can speed things up:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx3(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-5792089849bf73057d76\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-5792089849bf73057d76\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,10,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,13],\"depth\":[1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1,6,5,4,3,2,1,13,12,11,10,9,8,7,6,5,4,3,2,1,9,8,7,6,5,4,3,2,1,4,3,2,1,1,5,4,3,2,1,5,4,3,2,1,7,6,5,4,3,2,1],\"label\":[\"c\",\"FUN\",\"vapply\",\"is.na.xml_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"structure\",\"FUN\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx3\",\"FUN\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx3\",\"readRDS\",\"packageDescription\",\"utils::packageVersion\",\".rlang_cli_compat\",\".rlang_cli_format_fallback\",\"signal\",\"lifecycle::signal_stage\",\"mutate_at\",\"get_metrics\",\"read_gpx3\",\"guess_formats\",\".best_formats\",\".local_parse\",\"parse_date_time\",\".parse_xxx_hms\",\"<Anonymous>\",\"vec_as_names\",\"repaired_names\",\"set_repaired_names\",\"lst_to_tibble\",\"as_tibble.data.frame\",\"group_data.tbl_df\",\"group_keys.data.frame\",\"initialize\",\"DataMask$new\",\"slice_rows\",\"slice.data.frame\",\"get_metrics\",\"read_gpx3\",\"enexpr\",\"expr\",\"vec_assign_fallback\",\"<Anonymous>\",\"vec_unchop\",\"mutate_cols\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx3\",\"nrow\",\".fn\",\".f\",\"map2_dbl\",\"standardGeneric\",\"cbind\",\".geodist\",\".fn\",\".f\",\"map2_dbl\",\"matrix\",\".pointsToMatrix\",\".fn\",\".f\",\"map2_dbl\",\"new_data_mask\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\",\"get_metrics\",\"read_gpx3\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[36.1506118774414,36.4141082763672,36.4141082763672,36.4141082763672,36.4141082763672,36.4141082763672,36.4141082763672,36.4141082763672,37.0611801147461,37.0611801147461,37.0611801147461,37.0611801147461,37.0611801147461,37.0611801147461,37.0611801147461,37.0611801147461,37.4693908691406,37.4693908691406,37.4693908691406,37.4693908691406,37.4693908691406,37.7476272583008,37.7476272583008,37.7476272583008,37.7476272583008,37.7476272583008,37.7476272583008,37.7476272583008,37.7476272583008,37.7476272583008,37.7476272583008,38.0858993530273,38.0858993530273,38.0858993530273,38.0858993530273,38.0858993530273,38.0858993530273,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.0050430297852,41.7803497314453,41.7803497314453,41.7803497314453,41.7803497314453,41.7803497314453,41.7803497314453,41.7803497314453,41.7803497314453,41.7803497314453,43.052848815918,43.052848815918,43.052848815918,43.052848815918,43.9211044311523,45.1371154785156,45.1371154785156,45.1371154785156,45.1371154785156,45.1371154785156,46.0143890380859,46.0143890380859,46.0143890380859,46.0143890380859,46.0143890380859,47.2952423095703,47.2952423095703,47.2952423095703,47.2952423095703,47.2952423095703,47.2952423095703,47.2952423095703],\"meminc\":[0,0.263496398925781,0,0,0,0,0,0,0.647071838378906,0,0,0,0,0,0,0,0.408210754394531,0,0,0,0,0.278236389160156,0,0,0,0,0,0,0,0,0,0.338272094726562,0,0,0,0,0,2.91914367675781,0,0,0,0,0,0,0,0,0,0,0,0,0.775306701660156,0,0,0,0,0,0,0,0,1.27249908447266,0,0,0,0.868255615234375,1.21601104736328,0,0,0,0,0.877273559570312,0,0,0,0,1.28085327148438,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpTCTmwI/fileb1bc6899c97.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nWe're way faster, taking less than half a second! Now the most time is spent on `raster::pointDistance`, which we call a ton of times. What does `pointDistance` do? It takes two pairs `(lat1, lon1)` and `(lat2, lon2)` the distance between them[^2].\n\n[^2]: We can't calculate the distance using the L2 norm because longitude and latitude are spherical coordinates, not Euclidean coordinates.\n\n## GPX reader version 4: drop into Rcpp\n\nNext I Googled how to perform this calculation myself and found [this](http://www.movable-type.co.uk/scripts/latlong.html#ellipsoid) and [this](https://www.r-bloggers.com/great-circle-distance-calculations-in-r/). The `Rcpp` implementation looks like:\n\n::: {.cell}\n\n```{.rcpp .cell-code}\n#include <Rcpp.h>\n\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\ndouble haversine_dist(const NumericVector p1, const NumericVector p2) {\n  \n  double lat1 = p1[0] * M_PI / 180;\n  double lon1 = p1[1] * M_PI / 180;\n  double lat2 = p2[0] * M_PI / 180;\n  double lon2 = p2[1] * M_PI / 180;\n  \n  double d_lat = lat2 - lat1;\n  double d_lon = lon2 - lon1;\n  \n  double a = pow(sin(d_lat / 2.0), 2) + \n    cos(lat1) * cos(lat2) * pow(sin(d_lon / 2.0), 2);\n  double c = 2 * asin(std::min(1.0, sqrt(a)));\n  \n  return 6378137 * c; // 6378137 is the radius of the earth in meters\n}\n```\n:::\n\nThe haversine distance is fast to calculate at the cost of some small error, which we can see below:\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- c(0, 0)\np2 <- c(1, 1)\n\ndist_expected <- raster::pointDistance(p1, p2, lonlat = TRUE)\ndist_result <- haversine_dist(p1, p2)\n\ndist_result - dist_expected\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 525.9688\n```\n:::\n:::\n\nIt turns out that \"small error\" on the geological scale is big error on the neighborhood run scale. Put all together, the C++ version looks like:\n\n::: {.cell}\n\n```{.r .cell-code}\nread_gpx4 <- function(fname) {\n  gps_df <- read_gpx_xml(fname)\n  get_metrics(gps_df, dist_func = haversine_dist)\n}\n```\n:::\n\nWe profile one more time:\n\n::: {.cell}\n\n```{.r .cell-code}\nprofvis(read_gpx4(fname))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-8607f58080868de953e6\" style=\"width:100%;height:600px;\" class=\"profvis html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8607f58080868de953e6\">{\"x\":{\"message\":{\"prof\":{\"time\":[1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,8,9,9,9,9,9,9,9,9,9,9,9,9],\"depth\":[5,4,3,2,1,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,6,5,4,3,2,1,8,7,6,5,4,3,2,1,8,7,6,5,4,3,2,1,1,12,11,10,9,8,7,6,5,4,3,2,1],\"label\":[\"FUN\",\"lapply\",\"xml_attrs.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"$\",\"FUN\",\"lapply\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx4\",\"structure\",\"FUN\",\"lapply\",\"make_nodeset\",\"nodeset_apply.xml_nodeset\",\"xml_children\",\"read_gpx_xml\",\"read_gpx4\",\"isTRUE\",\"xml_text.xml_node\",\"vapply\",\"xml_text.xml_nodeset\",\"read_gpx_xml\",\"read_gpx4\",\"ns_env\",\"ns_env_name\",\"spec_package\",\"spec\",\"lifecycle::signal_stage\",\"mutate_at\",\"get_metrics\",\"read_gpx4\",\"[[\",\"group_rows\",\"initialize\",\"DataMask$new\",\"mutate_cols\",\"mutate.data.frame\",\"get_metrics\",\"read_gpx4\",\".Call\",\"env_bind\",\"local_bindings\",\"walk_data_tree\",\"reduce_sels\",\"eval_c\",\"walk_data_tree\",\"vars_select_eval\",\"eval_select_impl\",\"tidyselect::eval_select\",\"select.data.frame\",\"get_metrics\",\"read_gpx4\"],\"filenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"linenum\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],\"memalloc\":[36.2431640625,36.2431640625,36.2431640625,36.2431640625,36.2431640625,36.4664840698242,36.4664840698242,36.4664840698242,36.4664840698242,36.4664840698242,36.4664840698242,36.4664840698242,37.0657043457031,37.0657043457031,37.0657043457031,37.0657043457031,37.0657043457031,37.0657043457031,37.0657043457031,37.0657043457031,37.3766326904297,37.3766326904297,37.3766326904297,37.3766326904297,37.3766326904297,37.3766326904297,37.6142044067383,37.6142044067383,37.6142044067383,37.6142044067383,37.6142044067383,37.6142044067383,37.6142044067383,37.6142044067383,40.711067199707,40.711067199707,40.711067199707,40.711067199707,40.711067199707,40.711067199707,40.711067199707,40.711067199707,41.1755828857422,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328,45.4755401611328],\"meminc\":[0,0,0,0,0,0.223320007324219,0,0,0,0,0,0,0.599220275878906,0,0,0,0,0,0,0,0.310928344726562,0,0,0,0,0,0.237571716308594,0,0,0,0,0,0,0,3.09686279296875,0,0,0,0,0,0,0,0.464515686035156,4.29995727539062,0,0,0,0,0,0,0,0,0,0,0],\"filename\":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},\"interval\":10,\"files\":[],\"prof_output\":\"/tmp/RtmpTCTmwI/fileb1bc5a8194a2.prof\",\"highlight\":{\"output\":[\"^output\\\\$\"],\"gc\":[\"^<GC>$\"],\"stacktrace\":[\"^\\\\.\\\\.stacktraceo(n|ff)\\\\.\\\\.$\"]},\"split\":\"h\"}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nNow it takes only about 0.1 seconds, but the result isn't accurate enough anymore. I wasn't in the mood to implement a more precise great circle distance calculation, but hopefully this illustrates the general principle of dropping into `Rcpp` and also why it's important to test when profiling.\n\n## Comparing the various GPX readers\n\nNow we can compare how long each version takes using the `bench` package.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bench)\n\nmark(\n  read_gpx0(fname),\n  read_gpx1(fname),\n  read_gpx2(fname),\n  read_gpx3(fname),\n  read_gpx4(fname),\n  iterations = 5, # how many times to run everything. 5 is very low.\n  relative = TRUE,\n  check = FALSE # since readgpx4 isn't right, will error without this\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  expression         min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>       <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 read_gpx0(fname)  2.85   2.92      6.19      1.09     1.16\n2 read_gpx1(fname) 17.9   18.4       1         1.27     1   \n3 read_gpx2(fname)  5.07   5.28      3.54      1.03     1.11\n4 read_gpx3(fname)  1.53   1.60     11.8       1.00     1.47\n5 read_gpx4(fname)  1      1        17.9       1        1.12\n```\n:::\n:::\n\nHere timings are relative. We see that `read_gpx4` is about ten times faster than `read_gpx1` and two times faster than `read_gpx0`.\n\n## Embarrassing parallelization with `furrr`\n\nIn the end, I needed to do this for about fifty files. Since we can process each file independently of the other files, this operation is *embarrassingly parallel*. I actually wanted to use this data, so I didn't use the C++ haversine distance function. We can write with a single `map` call to process all the files at once:\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nrun_files_subset <- run_files[1:10]\n\nmap_dfr(run_files_subset, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11,780 × 11\n   run     lon   lat time                seg…¹ seg…²      dx      dt speed  pace\n   <chr> <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl>\n 1 1     -95.4  29.7 2017-10-29 18:31:00     2 907 … 0.00250 2.78e-4  9.00  6.67\n 2 1     -95.4  29.7 2017-10-29 18:31:01     2 907 … 0.00245 2.78e-4  8.81  6.81\n 3 1     -95.4  29.7 2017-10-29 18:31:02     2 907 … 0.00234 2.78e-4  8.41  7.13\n 4 1     -95.4  29.7 2017-10-29 18:31:03     2 907 … 0.00289 2.78e-4 10.4   5.77\n 5 1     -95.4  29.7 2017-10-29 18:31:04     2 907 … 0.00341 2.78e-4 12.3   4.88\n 6 1     -95.4  29.7 2017-10-29 18:31:05     2 907 … 0.00315 2.78e-4 11.4   5.29\n 7 1     -95.4  29.7 2017-10-29 18:31:06     2 907 … 0.00761 2.78e-4 27.4   2.19\n 8 1     -95.4  29.7 2017-10-29 18:31:08     2 907 … 0.00244 5.56e-4  4.39 13.7 \n 9 1     -95.4  29.7 2017-10-29 18:31:09     2 907 … 0.00322 2.78e-4 11.6   5.18\n10 1     -95.4  29.7 2017-10-29 18:31:11     2 907 … 0.00349 5.56e-4  6.28  9.55\n# … with 11,770 more rows, abbreviated variable names ¹​segment, ²​seg_length,\n#   and 1 more variable: elev <dbl>\n```\n:::\n:::\n\nWhich means we can also write this as a parallelized `map` call with `furrr` like so:\n\n::: {.cell .column-body-outset}\n\n```{.r .cell-code}\nlibrary(furrr)\nplan(multiprocess, workers = 12)\n\nfuture_map_dfr(run_files, read_gpx3, .id = \"run\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 59,833 × 11\n   run     lon   lat time                seg…¹ seg…²      dx      dt speed  pace\n   <chr> <dbl> <dbl> <dttm>              <dbl> <drt>   <dbl>   <dbl> <dbl> <dbl>\n 1 1     -95.4  29.7 2017-10-29 18:31:00     2 907 … 0.00250 2.78e-4  9.00  6.67\n 2 1     -95.4  29.7 2017-10-29 18:31:01     2 907 … 0.00245 2.78e-4  8.81  6.81\n 3 1     -95.4  29.7 2017-10-29 18:31:02     2 907 … 0.00234 2.78e-4  8.41  7.13\n 4 1     -95.4  29.7 2017-10-29 18:31:03     2 907 … 0.00289 2.78e-4 10.4   5.77\n 5 1     -95.4  29.7 2017-10-29 18:31:04     2 907 … 0.00341 2.78e-4 12.3   4.88\n 6 1     -95.4  29.7 2017-10-29 18:31:05     2 907 … 0.00315 2.78e-4 11.4   5.29\n 7 1     -95.4  29.7 2017-10-29 18:31:06     2 907 … 0.00761 2.78e-4 27.4   2.19\n 8 1     -95.4  29.7 2017-10-29 18:31:08     2 907 … 0.00244 5.56e-4  4.39 13.7 \n 9 1     -95.4  29.7 2017-10-29 18:31:09     2 907 … 0.00322 2.78e-4 11.6   5.18\n10 1     -95.4  29.7 2017-10-29 18:31:11     2 907 … 0.00349 5.56e-4  6.28  9.55\n# … with 59,823 more rows, abbreviated variable names ¹​segment, ²​seg_length,\n#   and 1 more variable: elev <dbl>\n```\n:::\n:::\n\nNote that other than loading `furrr` and calling `plan(multiprocess)` all we've had to do to get parallelism is to call `furrr::future_map_dfr`, which has exactly the same API as `purrr::map_dfr`. My computer has twelve cores, meaning there's a maximum possible speedup of twelve.\n\n::: {.cell}\n\n```{.r .cell-code}\nmark(\n  sequential = map_dfr(run_files, read_gpx3, .id = \"run\"),\n  parallel = future_map_dfr(run_files, read_gpx3, .id = \"run\"),\n  iterations = 5,\n  memory = FALSE,\n  relative = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  expression   min median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr> <dbl>  <dbl>     <dbl>     <dbl>    <dbl>\n1 sequential  4.88   4.54      1           NA     1   \n2 parallel    1      1         4.62        NA     3.99\n```\n:::\n:::\n\n## Wrap Up\n\nThis was a low stakes exercise in speeding up R code. By the time I'd written all of these it would have been several hundred times faster to use `read_gpx0` and just save the results to a `.rds` file. Still, it was fun to work through the profiling workflow and I look forward to enterprising strangers on the internet pointing out places where things can get faster still.\n\nSee also [`gpx`](https://cran.r-project.org/package=gpx) for a more modern approach to reading `.gpx` files in R that did not exist at the time I originally wrote this blogpost.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/jquery-1.12.4/jquery.min.js\"></script>\n<script src=\"../../site_libs/d3-3.5.6/d3.min.js\"></script>\n<link href=\"../../site_libs/profvis-0.3.6.9000/profvis.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/profvis-0.3.6.9000/profvis.js\"></script>\n<script src=\"../../site_libs/profvis-0.3.6.9000/scroll.js\"></script>\n<link href=\"../../site_libs/highlight-6.2.0/textmate.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/highlight-6.2.0/highlight.js\"></script>\n<script src=\"../../site_libs/profvis-binding-0.3.7.9000/profvis.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}